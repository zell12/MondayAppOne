// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Zell.UiPathAutomation.Orchestrator
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Maintenance operations.
    /// </summary>
    public partial interface IMaintenance
    {
        /// <summary>
        /// Ends a maintenance window
        /// </summary>
        /// <remarks>
        /// Client Credentials Flow required permissions: Administration or
        /// Administration.Write.
        ///
        /// Host only. Requires authentication.
        /// </remarks>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        Task<HttpOperationResponse> EndWithHttpMessagesAsync(int? tenantId = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets the host admin logs.
        /// </summary>
        /// <remarks>
        /// Client Credentials Flow required permissions: Administration or
        /// Administration.Read.
        ///
        /// Host only. Required permissions: Audit.View.
        /// </remarks>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<MaintenanceSetting>> GetWithHttpMessagesAsync(int? tenantId = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Starts a maintenance window
        /// </summary>
        /// <remarks>
        /// Client Credentials Flow required permissions: Administration or
        /// Administration.Write.
        ///
        /// Host only. Requires authentication.
        /// </remarks>
        /// <param name='phase'>
        /// Phase - UiPath.Orchestrator.DataContracts.MaintenanceState.Draining
        /// or UiPath.Orchestrator.DataContracts.MaintenanceState.Suspended.
        /// Possible values include: 'None', 'Draining', 'Suspended'
        /// </param>
        /// <param name='force'>
        /// Whether to ignore errors during transition
        /// </param>
        /// <param name='killJobs'>
        /// Whether to force-kill running jobs when transitioning to
        /// UiPath.Orchestrator.DataContracts.MaintenanceState.Suspended
        /// </param>
        /// <param name='tenantId'>
        /// If tenant id is set, maintenance will start only for this tenant
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        Task<HttpOperationResponse> StartWithHttpMessagesAsync(MaintenanceState? phase = default(MaintenanceState?), bool? force = false, bool? killJobs = false, int? tenantId = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
