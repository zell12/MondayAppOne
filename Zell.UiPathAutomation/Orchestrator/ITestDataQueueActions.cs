// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Zell.UiPathAutomation.Orchestrator
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// TestDataQueueActions operations.
    /// </summary>
    public partial interface ITestDataQueueActions
    {
        /// <summary>
        /// Add a new test data queue item
        /// </summary>
        /// <remarks>
        /// Client Credentials Flow required permissions: TestDataQueues or
        /// TestDataQueues.Write.
        ///
        /// Required permissions: TestDataQueueItems.Create.
        ///
        /// Responses:
        /// 201 Returns the added test data queue item
        /// 403 If the caller doesn't have permissions to create test data
        /// queue items
        /// 409 If the test data queue item content violates the content JSON
        /// schema set on the queue
        /// </remarks>
        /// <param name='body'>
        /// QueueName: the test data queue name; Content: the item content
        /// </param>
        /// <param name='xUIPATHOrganizationUnitId'>
        /// Folder/OrganizationUnit Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<TestDataQueueItemDto>> AddItemWithHttpMessagesAsync(TestDataQueueAddItemDto body = default(TestDataQueueAddItemDto), long? xUIPATHOrganizationUnitId = default(long?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Bulk adds an array of data queue items
        /// </summary>
        /// <remarks>
        /// Client Credentials Flow required permissions: TestDataQueues or
        /// TestDataQueues.Write.
        ///
        /// Required permissions: TestDataQueueItems.Create.
        ///
        /// Responses:
        /// 200 Returns the number of items added
        /// 403 If the caller doesn't have permissions to create test data
        /// queue items
        /// 409 If the test data queue items violates the content JSON schema
        /// set on the queue
        /// </remarks>
        /// <param name='body'>
        /// QueueName: the test data queue name; Items: an array of item
        /// content
        /// </param>
        /// <param name='xUIPATHOrganizationUnitId'>
        /// Folder/OrganizationUnit Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<int?>> BulkAddItemsWithHttpMessagesAsync(TestDataQueueBulkAddItemsDto body = default(TestDataQueueBulkAddItemsDto), long? xUIPATHOrganizationUnitId = default(long?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete all items from a test data queue
        /// </summary>
        /// <remarks>
        /// Client Credentials Flow required permissions: TestDataQueues or
        /// TestDataQueues.Write.
        ///
        /// Required permissions: TestDataQueueItems.Delete.
        ///
        /// Responses:
        /// 202 All items from the test data queue were scheduled for deletion
        /// 403 If the caller doesn't have permissions to delete test data
        /// queue items
        /// </remarks>
        /// <param name='queueName'>
        /// The name of the test data queue
        /// </param>
        /// <param name='xUIPATHOrganizationUnitId'>
        /// Folder/OrganizationUnit Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        Task<HttpOperationResponse> DeleteAllItemsWithHttpMessagesAsync(string queueName = default(string), long? xUIPATHOrganizationUnitId = default(long?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete specific test data queue items
        /// </summary>
        /// <remarks>
        /// Client Credentials Flow required permissions: TestDataQueues or
        /// TestDataQueues.Write.
        ///
        /// Required permissions: TestDataQueueItems.Delete.
        ///
        /// Responses:
        /// 204 Deleted the test data queue items
        /// 403 If the caller doesn't have permissions to delete test data
        /// queue items
        /// </remarks>
        /// <param name='body'>
        /// The Ids of the test data queue items
        /// </param>
        /// <param name='xUIPATHOrganizationUnitId'>
        /// Folder/OrganizationUnit Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        Task<HttpOperationResponse> DeleteItemsWithHttpMessagesAsync(IList<long?> body = default(IList<long?>), long? xUIPATHOrganizationUnitId = default(long?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get the next unconsumed test data queue item
        /// </summary>
        /// <remarks>
        /// Client Credentials Flow required permissions: TestDataQueues or
        /// TestDataQueues.Write.
        ///
        /// Required permissions: TestDataQueueItems.View.
        ///
        /// Responses:
        /// 200 Returns the next unconsumed test data queue item
        /// 204 If there are no unconsumed test data queue items in the queue
        /// 403 If the caller doesn't have permissions to view test data queue
        /// items
        /// 404 If the test data queue does not exist
        /// </remarks>
        /// <param name='body'>
        /// QueueName:the test data queue name; SetConsumed: Whether to set the
        /// item's IsConsumed flag as true or false
        /// </param>
        /// <param name='xUIPATHOrganizationUnitId'>
        /// Folder/OrganizationUnit Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<TestDataQueueItemDto>> GetNextItemWithHttpMessagesAsync(TestDataQueueGetNextItemDto body = default(TestDataQueueGetNextItemDto), long? xUIPATHOrganizationUnitId = default(long?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Set the IsConsumed flag for all items from a test data queue
        /// </summary>
        /// <remarks>
        /// Client Credentials Flow required permissions: TestDataQueues or
        /// TestDataQueues.Write.
        ///
        /// Required permissions: TestDataQueueItems.Edit.
        ///
        /// Responses:
        /// 202 All items from the test data queue were scheduled for setting
        /// the IsConsumed flag
        /// 403 If the caller doesn't have permissions to edit test data queue
        /// items
        /// </remarks>
        /// <param name='body'>
        /// QueueName: the name of the test data queue; IsConsumed: the value
        /// to be set on the items IsConsumed flag
        /// </param>
        /// <param name='xUIPATHOrganizationUnitId'>
        /// Folder/OrganizationUnit Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        Task<HttpOperationResponse> SetAllItemsConsumedWithHttpMessagesAsync(TestDataQueueSetAllItemsConsumedDto body = default(TestDataQueueSetAllItemsConsumedDto), long? xUIPATHOrganizationUnitId = default(long?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Set the IsConsumed flag for specific test data queue items
        /// </summary>
        /// <remarks>
        /// Client Credentials Flow required permissions: TestDataQueues or
        /// TestDataQueues.Write.
        ///
        /// Required permissions: TestDataQueueItems.Edit.
        ///
        /// Responses:
        /// 200 If the operation succeeded
        /// 403 If the caller doesn't have permissions to edit test data queue
        /// items
        /// </remarks>
        /// <param name='body'>
        /// ItemIds: the list of item ids for which to set the IsConsumed flag;
        /// IsConsumed: the value to be set on the items IsConsumed flag
        /// </param>
        /// <param name='xUIPATHOrganizationUnitId'>
        /// Folder/OrganizationUnit Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        Task<HttpOperationResponse> SetItemsConsumedWithHttpMessagesAsync(TestDataQueueSetItemsConsumedDto body = default(TestDataQueueSetItemsConsumedDto), long? xUIPATHOrganizationUnitId = default(long?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
