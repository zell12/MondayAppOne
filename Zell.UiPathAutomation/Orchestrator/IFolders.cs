// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Zell.UiPathAutomation.Orchestrator
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Folders operations.
    /// </summary>
    public partial interface IFolders
    {
        /// <summary>
        /// Gets folders.
        /// </summary>
        /// <remarks>
        /// Client Credentials Flow required permissions: Folders or
        /// Folders.Read.
        ///
        /// Required permissions: (Units.View - Gets all folders) and
        /// (SubFolders.View - Gets only folders where user has SubFolders.View
        /// permission).
        /// </remarks>
        /// <param name='expand'>
        /// Indicates the related entities to be represented inline. The
        /// maximum depth is 2.
        /// </param>
        /// <param name='filter'>
        /// Restricts the set of items returned. The maximum number of
        /// expressions is 100.
        /// </param>
        /// <param name='select'>
        /// Limits the properties returned in the result.
        /// </param>
        /// <param name='orderby'>
        /// Specifies the order in which items are returned. The maximum number
        /// of expressions is 5.
        /// </param>
        /// <param name='top'>
        /// Limits the number of items returned from a collection. The maximum
        /// value is 1000.
        /// </param>
        /// <param name='skip'>
        /// Excludes the specified number of items of the queried collection
        /// from the result.
        /// </param>
        /// <param name='count'>
        /// Indicates whether the total count of items within a collection are
        /// returned in the result.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<ODataValueOfIEnumerableOfFolderDto>> GetWithHttpMessagesAsync(string expand = default(string), string filter = default(string), string select = default(string), string orderby = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Creates a new folder.
        /// </summary>
        /// <remarks>
        /// Client Credentials Flow required permissions: Folders or
        /// Folders.Write.
        ///
        /// Required permissions: (Units.Create - Creates root or subfolder)
        /// and (SubFolders.Create - Creates subfolder if user has
        /// SubFolders.Create permission on parent).
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<FolderDto>> PostWithHttpMessagesAsync(FolderDto body = default(FolderDto), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets a single folder, based on its Id.
        /// </summary>
        /// <remarks>
        /// Client Credentials Flow required permissions: Folders or
        /// Folders.Read.
        ///
        /// Required permissions: (Units.View - Gets any folder) and
        /// (SubFolders.View - Gets folder only if user has SubFolders.View
        /// permission on it).
        /// </remarks>
        /// <param name='key'>
        /// </param>
        /// <param name='expand'>
        /// Indicates the related entities to be represented inline. The
        /// maximum depth is 2.
        /// </param>
        /// <param name='select'>
        /// Limits the properties returned in the result.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<FolderDto>> GetByIdWithHttpMessagesAsync(long key, string expand = default(string), string select = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Edits a folder.
        /// </summary>
        /// <remarks>
        /// Client Credentials Flow required permissions: Folders or
        /// Folders.Write.
        ///
        /// Required permissions: (Units.Edit - Edits any folder) and
        /// (SubFolders.Edit - Edits folder only if user has SubFolders.Edit
        /// permission on it).
        /// </remarks>
        /// <param name='key'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<FolderDto>> PutByIdWithHttpMessagesAsync(long key, FolderDto body = default(FolderDto), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Deletes a folder. Succeeds only if no entities or user associations
        /// exist in this folder or any of its descendants.
        /// </summary>
        /// <remarks>
        /// Client Credentials Flow required permissions: Folders or
        /// Folders.Write.
        ///
        /// Required permissions: (Units.Delete - Deletes any folder) and
        /// (SubFolders.Delete - Deletes folder only if user has
        /// SubFolders.Delete permission on it).
        /// </remarks>
        /// <param name='key'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        Task<HttpOperationResponse> DeleteByIdWithHttpMessagesAsync(long key, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Remove user assignment from a folder.
        /// </summary>
        /// <remarks>
        /// Client Credentials Flow required permissions: Folders or
        /// Folders.Write.
        ///
        /// Required permissions: (Units.Edit or SubFolders.Edit) and
        /// (Machines.View).
        /// </remarks>
        /// <param name='key'>
        /// </param>
        /// <param name='body'>
        /// The Ids of the machines to remove from the folder
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        Task<HttpOperationResponse> RemoveMachinesFromFolderByIdWithHttpMessagesAsync(long key, FoldersRemoveMachinesFromFolderParameters body = default(FoldersRemoveMachinesFromFolderParameters), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Remove user assignment from a folder.
        /// </summary>
        /// <remarks>
        /// Client Credentials Flow required permissions: Folders or
        /// Folders.Write.
        ///
        /// Required permissions: (Units.Edit - Remove user from any folder)
        /// and (SubFolders.Edit - Remove user only if caller has
        /// SubFolders.Edit permission on folder) and (Users.View).
        /// </remarks>
        /// <param name='key'>
        /// </param>
        /// <param name='body'>
        /// userId - The Id of the user to remove from the folder
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        Task<HttpOperationResponse> RemoveUserFromFolderByIdWithHttpMessagesAsync(long key, FoldersRemoveUserFromFolderParameters body = default(FoldersRemoveUserFromFolderParameters), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Assigns a directory user or group to a set of folders with an
        /// optional set of roles per folder.
        /// </summary>
        /// <remarks>
        /// Client Credentials Flow required permissions: Folders or
        /// Folders.Write.
        ///
        /// Required permissions: (Units.Edit - Assigns domain user to any
        /// folder) and (SubFolders.Edit - Assigns domain user only if caller
        /// has SubFolders.Edit permission on all folders provided) and
        /// (Users.View and Roles.View).
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        Task<HttpOperationResponse> AssignDomainUserWithHttpMessagesAsync(FoldersAssignDomainUserParameters body = default(FoldersAssignDomainUserParameters), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Assigns one or more machines to a set of folders.
        /// </summary>
        /// <remarks>
        /// Client Credentials Flow required permissions: Folders or
        /// Folders.Write.
        ///
        /// Required permissions: (Units.Edit or SubFolders.Edit) and
        /// (Machines.View).
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        Task<HttpOperationResponse> AssignMachinesWithHttpMessagesAsync(FoldersAssignMachinesParameters body = default(FoldersAssignMachinesParameters), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Assigns one or more users to a set of folders with an optional set
        /// of roles per folder.
        /// </summary>
        /// <remarks>
        /// Client Credentials Flow required permissions: Folders or
        /// Folders.Write.
        ///
        /// Required permissions: (Units.Edit - Assigns users to any folder)
        /// and (SubFolders.Edit - Assigns users only if caller has
        /// SubFolders.Edit permission on all folders provided) and (Users.View
        /// and Roles.View).
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        Task<HttpOperationResponse> AssignUsersWithHttpMessagesAsync(FoldersAssignUsersParameters body = default(FoldersAssignUsersParameters), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns a page of the user-folder assignments for the input user,
        /// including the roles for each folder.
        /// The response also includes the folders assigned to the directory
        /// groups of the user.
        /// The distinction between the folders assigned directly to the user
        /// and the ones assigned to one of his groups
        /// can be made via the User field of the response.
        /// LIMITATION: If URI parameters contain special characters (eg. \,
        /// /), use instead api/FoldersNavigation/GetAllRolesForUser endpoint.
        /// </summary>
        /// <remarks>
        /// Client Credentials Flow required permissions: Folders or
        /// Folders.Read.
        ///
        /// Required permissions: (Units.View - Gets roles from all folders)
        /// and (SubFolders.View - Gets roles only from folders where caller
        /// has SubFolders.View permission) and (Users.View and Roles.View).
        /// </remarks>
        /// <param name='username'>
        /// User name
        /// </param>
        /// <param name='skip'>
        /// </param>
        /// <param name='take'>
        /// </param>
        /// <param name='expand'>
        /// Indicates the related entities to be represented inline. The
        /// maximum depth is 2.
        /// </param>
        /// <param name='select'>
        /// Limits the properties returned in the result.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<UserRoleAssignmentsDto>> GetAllRolesForUserByUsernameAndSkipAndTakeWithHttpMessagesAsync(string username, int skip, int take, string expand = default(string), string select = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns the machines assigned to a folder.
        /// </summary>
        /// <remarks>
        /// Client Credentials Flow required permissions: Folders or
        /// Folders.Read.
        ///
        /// Required permissions: (Units.View or SubFolders.View) and
        /// (Machines.View).
        /// </remarks>
        /// <param name='key'>
        /// </param>
        /// <param name='expand'>
        /// Indicates the related entities to be represented inline. The
        /// maximum depth is 2.
        /// </param>
        /// <param name='filter'>
        /// Restricts the set of items returned. The maximum number of
        /// expressions is 100.
        /// </param>
        /// <param name='select'>
        /// Limits the properties returned in the result.
        /// </param>
        /// <param name='orderby'>
        /// Specifies the order in which items are returned. The maximum number
        /// of expressions is 5.
        /// </param>
        /// <param name='top'>
        /// Limits the number of items returned from a collection. The maximum
        /// value is 1000.
        /// </param>
        /// <param name='skip'>
        /// Excludes the specified number of items of the queried collection
        /// from the result.
        /// </param>
        /// <param name='count'>
        /// Indicates whether the total count of items within a collection are
        /// returned in the result.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<ODataValueOfIEnumerableOfMachineFolderDto>> GetMachinesForFolderByKeyWithHttpMessagesAsync(long key, string expand = default(string), string filter = default(string), string select = default(string), string orderby = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns the users who have access to a folder and optionally the
        /// fine-grained roles each one
        /// has on that folder.
        /// </summary>
        /// <remarks>
        /// Client Credentials Flow required permissions: Folders or
        /// Folders.Read.
        ///
        /// Required permissions: (Units.View - Gets users for any folder) and
        /// (SubFolders.View - Gets users only if caller has SubFolders.View
        /// permission on folder) and (Users.View).
        /// </remarks>
        /// <param name='key'>
        /// </param>
        /// <param name='includeInherited'>
        /// If true, the response will include users inherited from ancestors
        /// </param>
        /// <param name='expand'>
        /// Indicates the related entities to be represented inline. The
        /// maximum depth is 2.
        /// </param>
        /// <param name='filter'>
        /// Restricts the set of items returned. The maximum number of
        /// expressions is 100.
        /// </param>
        /// <param name='select'>
        /// Limits the properties returned in the result.
        /// </param>
        /// <param name='orderby'>
        /// Specifies the order in which items are returned. The maximum number
        /// of expressions is 5.
        /// </param>
        /// <param name='top'>
        /// Limits the number of items returned from a collection. The maximum
        /// value is 1000.
        /// </param>
        /// <param name='skip'>
        /// Excludes the specified number of items of the queried collection
        /// from the result.
        /// </param>
        /// <param name='count'>
        /// Indicates whether the total count of items within a collection are
        /// returned in the result.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<ODataValueOfIEnumerableOfUserRolesDto>> GetUsersForFolderByKeyAndIncludeinheritedWithHttpMessagesAsync(long key, bool includeInherited, string expand = default(string), string filter = default(string), string select = default(string), string orderby = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
