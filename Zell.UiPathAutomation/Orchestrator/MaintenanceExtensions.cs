// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Zell.UiPathAutomation.Orchestrator
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Maintenance.
    /// </summary>
    public static partial class MaintenanceExtensions
    {
            /// <summary>
            /// Ends a maintenance window
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Administration or
            /// Administration.Write.
            ///
            /// Host only. Requires authentication.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantId'>
            /// </param>
            public static void End(this IMaintenance operations, int? tenantId = default(int?))
            {
                operations.EndAsync(tenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Ends a maintenance window
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Administration or
            /// Administration.Write.
            ///
            /// Host only. Requires authentication.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task EndAsync(this IMaintenance operations, int? tenantId = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.EndWithHttpMessagesAsync(tenantId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the host admin logs.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Administration or
            /// Administration.Read.
            ///
            /// Host only. Required permissions: Audit.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantId'>
            /// </param>
            public static MaintenanceSetting Get(this IMaintenance operations, int? tenantId = default(int?))
            {
                return operations.GetAsync(tenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the host admin logs.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Administration or
            /// Administration.Read.
            ///
            /// Host only. Required permissions: Audit.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MaintenanceSetting> GetAsync(this IMaintenance operations, int? tenantId = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(tenantId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Starts a maintenance window
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Administration or
            /// Administration.Write.
            ///
            /// Host only. Requires authentication.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='phase'>
            /// Phase - UiPath.Orchestrator.DataContracts.MaintenanceState.Draining or
            /// UiPath.Orchestrator.DataContracts.MaintenanceState.Suspended. Possible
            /// values include: 'None', 'Draining', 'Suspended'
            /// </param>
            /// <param name='force'>
            /// Whether to ignore errors during transition
            /// </param>
            /// <param name='killJobs'>
            /// Whether to force-kill running jobs when transitioning to
            /// UiPath.Orchestrator.DataContracts.MaintenanceState.Suspended
            /// </param>
            /// <param name='tenantId'>
            /// If tenant id is set, maintenance will start only for this tenant
            /// </param>
            public static void Start(this IMaintenance operations, MaintenanceState? phase = default(MaintenanceState?), bool? force = false, bool? killJobs = false, int? tenantId = default(int?))
            {
                operations.StartAsync(phase, force, killJobs, tenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Starts a maintenance window
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Administration or
            /// Administration.Write.
            ///
            /// Host only. Requires authentication.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='phase'>
            /// Phase - UiPath.Orchestrator.DataContracts.MaintenanceState.Draining or
            /// UiPath.Orchestrator.DataContracts.MaintenanceState.Suspended. Possible
            /// values include: 'None', 'Draining', 'Suspended'
            /// </param>
            /// <param name='force'>
            /// Whether to ignore errors during transition
            /// </param>
            /// <param name='killJobs'>
            /// Whether to force-kill running jobs when transitioning to
            /// UiPath.Orchestrator.DataContracts.MaintenanceState.Suspended
            /// </param>
            /// <param name='tenantId'>
            /// If tenant id is set, maintenance will start only for this tenant
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StartAsync(this IMaintenance operations, MaintenanceState? phase = default(MaintenanceState?), bool? force = false, bool? killJobs = false, int? tenantId = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.StartWithHttpMessagesAsync(phase, force, killJobs, tenantId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
