// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Zell.UiPathAutomation.Orchestrator
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Folders.
    /// </summary>
    public static partial class FoldersExtensions
    {
            /// <summary>
            /// Gets folders.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Folders or Folders.Read.
            ///
            /// Required permissions: (Units.View - Gets all folders) and (SubFolders.View
            /// - Gets only folders where user has SubFolders.View permission).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='filter'>
            /// Restricts the set of items returned. The maximum number of expressions is
            /// 100.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            /// <param name='orderby'>
            /// Specifies the order in which items are returned. The maximum number of
            /// expressions is 5.
            /// </param>
            /// <param name='top'>
            /// Limits the number of items returned from a collection. The maximum value is
            /// 1000.
            /// </param>
            /// <param name='skip'>
            /// Excludes the specified number of items of the queried collection from the
            /// result.
            /// </param>
            /// <param name='count'>
            /// Indicates whether the total count of items within a collection are returned
            /// in the result.
            /// </param>
            public static ODataValueOfIEnumerableOfFolderDto Get(this IFolders operations, string expand = default(string), string filter = default(string), string select = default(string), string orderby = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?))
            {
                return operations.GetAsync(expand, filter, select, orderby, top, skip, count).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets folders.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Folders or Folders.Read.
            ///
            /// Required permissions: (Units.View - Gets all folders) and (SubFolders.View
            /// - Gets only folders where user has SubFolders.View permission).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='filter'>
            /// Restricts the set of items returned. The maximum number of expressions is
            /// 100.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            /// <param name='orderby'>
            /// Specifies the order in which items are returned. The maximum number of
            /// expressions is 5.
            /// </param>
            /// <param name='top'>
            /// Limits the number of items returned from a collection. The maximum value is
            /// 1000.
            /// </param>
            /// <param name='skip'>
            /// Excludes the specified number of items of the queried collection from the
            /// result.
            /// </param>
            /// <param name='count'>
            /// Indicates whether the total count of items within a collection are returned
            /// in the result.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataValueOfIEnumerableOfFolderDto> GetAsync(this IFolders operations, string expand = default(string), string filter = default(string), string select = default(string), string orderby = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(expand, filter, select, orderby, top, skip, count, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new folder.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Folders or Folders.Write.
            ///
            /// Required permissions: (Units.Create - Creates root or subfolder) and
            /// (SubFolders.Create - Creates subfolder if user has SubFolders.Create
            /// permission on parent).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static FolderDto Post(this IFolders operations, FolderDto body = default(FolderDto))
            {
                return operations.PostAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new folder.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Folders or Folders.Write.
            ///
            /// Required permissions: (Units.Create - Creates root or subfolder) and
            /// (SubFolders.Create - Creates subfolder if user has SubFolders.Create
            /// permission on parent).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FolderDto> PostAsync(this IFolders operations, FolderDto body = default(FolderDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a single folder, based on its Id.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Folders or Folders.Read.
            ///
            /// Required permissions: (Units.View - Gets any folder) and (SubFolders.View -
            /// Gets folder only if user has SubFolders.View permission on it).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            public static FolderDto GetById(this IFolders operations, long key, string expand = default(string), string select = default(string))
            {
                return operations.GetByIdAsync(key, expand, select).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a single folder, based on its Id.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Folders or Folders.Read.
            ///
            /// Required permissions: (Units.View - Gets any folder) and (SubFolders.View -
            /// Gets folder only if user has SubFolders.View permission on it).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FolderDto> GetByIdAsync(this IFolders operations, long key, string expand = default(string), string select = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByIdWithHttpMessagesAsync(key, expand, select, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Edits a folder.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Folders or Folders.Write.
            ///
            /// Required permissions: (Units.Edit - Edits any folder) and (SubFolders.Edit
            /// - Edits folder only if user has SubFolders.Edit permission on it).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static FolderDto PutById(this IFolders operations, long key, FolderDto body = default(FolderDto))
            {
                return operations.PutByIdAsync(key, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Edits a folder.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Folders or Folders.Write.
            ///
            /// Required permissions: (Units.Edit - Edits any folder) and (SubFolders.Edit
            /// - Edits folder only if user has SubFolders.Edit permission on it).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FolderDto> PutByIdAsync(this IFolders operations, long key, FolderDto body = default(FolderDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutByIdWithHttpMessagesAsync(key, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a folder. Succeeds only if no entities or user associations
            /// exist in this folder or any of its descendants.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Folders or Folders.Write.
            ///
            /// Required permissions: (Units.Delete - Deletes any folder) and
            /// (SubFolders.Delete - Deletes folder only if user has SubFolders.Delete
            /// permission on it).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            public static void DeleteById(this IFolders operations, long key)
            {
                operations.DeleteByIdAsync(key).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a folder. Succeeds only if no entities or user associations
            /// exist in this folder or any of its descendants.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Folders or Folders.Write.
            ///
            /// Required permissions: (Units.Delete - Deletes any folder) and
            /// (SubFolders.Delete - Deletes folder only if user has SubFolders.Delete
            /// permission on it).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteByIdAsync(this IFolders operations, long key, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteByIdWithHttpMessagesAsync(key, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Remove user assignment from a folder.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Folders or Folders.Write.
            ///
            /// Required permissions: (Units.Edit or SubFolders.Edit) and (Machines.View).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='body'>
            /// The Ids of the machines to remove from the folder
            /// </param>
            public static void RemoveMachinesFromFolderById(this IFolders operations, long key, FoldersRemoveMachinesFromFolderParameters body = default(FoldersRemoveMachinesFromFolderParameters))
            {
                operations.RemoveMachinesFromFolderByIdAsync(key, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove user assignment from a folder.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Folders or Folders.Write.
            ///
            /// Required permissions: (Units.Edit or SubFolders.Edit) and (Machines.View).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='body'>
            /// The Ids of the machines to remove from the folder
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveMachinesFromFolderByIdAsync(this IFolders operations, long key, FoldersRemoveMachinesFromFolderParameters body = default(FoldersRemoveMachinesFromFolderParameters), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RemoveMachinesFromFolderByIdWithHttpMessagesAsync(key, body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Remove user assignment from a folder.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Folders or Folders.Write.
            ///
            /// Required permissions: (Units.Edit - Remove user from any folder) and
            /// (SubFolders.Edit - Remove user only if caller has SubFolders.Edit
            /// permission on folder) and (Users.View).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='body'>
            /// userId - The Id of the user to remove from the folder
            /// </param>
            public static void RemoveUserFromFolderById(this IFolders operations, long key, FoldersRemoveUserFromFolderParameters body = default(FoldersRemoveUserFromFolderParameters))
            {
                operations.RemoveUserFromFolderByIdAsync(key, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove user assignment from a folder.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Folders or Folders.Write.
            ///
            /// Required permissions: (Units.Edit - Remove user from any folder) and
            /// (SubFolders.Edit - Remove user only if caller has SubFolders.Edit
            /// permission on folder) and (Users.View).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='body'>
            /// userId - The Id of the user to remove from the folder
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveUserFromFolderByIdAsync(this IFolders operations, long key, FoldersRemoveUserFromFolderParameters body = default(FoldersRemoveUserFromFolderParameters), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RemoveUserFromFolderByIdWithHttpMessagesAsync(key, body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Assigns a directory user or group to a set of folders with an optional set
            /// of roles per folder.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Folders or Folders.Write.
            ///
            /// Required permissions: (Units.Edit - Assigns domain user to any folder) and
            /// (SubFolders.Edit - Assigns domain user only if caller has SubFolders.Edit
            /// permission on all folders provided) and (Users.View and Roles.View).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void AssignDomainUser(this IFolders operations, FoldersAssignDomainUserParameters body = default(FoldersAssignDomainUserParameters))
            {
                operations.AssignDomainUserAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Assigns a directory user or group to a set of folders with an optional set
            /// of roles per folder.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Folders or Folders.Write.
            ///
            /// Required permissions: (Units.Edit - Assigns domain user to any folder) and
            /// (SubFolders.Edit - Assigns domain user only if caller has SubFolders.Edit
            /// permission on all folders provided) and (Users.View and Roles.View).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AssignDomainUserAsync(this IFolders operations, FoldersAssignDomainUserParameters body = default(FoldersAssignDomainUserParameters), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AssignDomainUserWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Assigns one or more machines to a set of folders.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Folders or Folders.Write.
            ///
            /// Required permissions: (Units.Edit or SubFolders.Edit) and (Machines.View).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void AssignMachines(this IFolders operations, FoldersAssignMachinesParameters body = default(FoldersAssignMachinesParameters))
            {
                operations.AssignMachinesAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Assigns one or more machines to a set of folders.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Folders or Folders.Write.
            ///
            /// Required permissions: (Units.Edit or SubFolders.Edit) and (Machines.View).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AssignMachinesAsync(this IFolders operations, FoldersAssignMachinesParameters body = default(FoldersAssignMachinesParameters), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AssignMachinesWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Assigns one or more users to a set of folders with an optional set of roles
            /// per folder.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Folders or Folders.Write.
            ///
            /// Required permissions: (Units.Edit - Assigns users to any folder) and
            /// (SubFolders.Edit - Assigns users only if caller has SubFolders.Edit
            /// permission on all folders provided) and (Users.View and Roles.View).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void AssignUsers(this IFolders operations, FoldersAssignUsersParameters body = default(FoldersAssignUsersParameters))
            {
                operations.AssignUsersAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Assigns one or more users to a set of folders with an optional set of roles
            /// per folder.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Folders or Folders.Write.
            ///
            /// Required permissions: (Units.Edit - Assigns users to any folder) and
            /// (SubFolders.Edit - Assigns users only if caller has SubFolders.Edit
            /// permission on all folders provided) and (Users.View and Roles.View).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AssignUsersAsync(this IFolders operations, FoldersAssignUsersParameters body = default(FoldersAssignUsersParameters), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AssignUsersWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns a page of the user-folder assignments for the input user, including
            /// the roles for each folder.
            /// The response also includes the folders assigned to the directory groups of
            /// the user.
            /// The distinction between the folders assigned directly to the user and the
            /// ones assigned to one of his groups
            /// can be made via the User field of the response.
            /// LIMITATION: If URI parameters contain special characters (eg. \, /), use
            /// instead api/FoldersNavigation/GetAllRolesForUser endpoint.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Folders or Folders.Read.
            ///
            /// Required permissions: (Units.View - Gets roles from all folders) and
            /// (SubFolders.View - Gets roles only from folders where caller has
            /// SubFolders.View permission) and (Users.View and Roles.View).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='username'>
            /// User name
            /// </param>
            /// <param name='skip'>
            /// </param>
            /// <param name='take'>
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            public static UserRoleAssignmentsDto GetAllRolesForUserByUsernameAndSkipAndTake(this IFolders operations, string username, int skip, int take, string expand = default(string), string select = default(string))
            {
                return operations.GetAllRolesForUserByUsernameAndSkipAndTakeAsync(username, skip, take, expand, select).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a page of the user-folder assignments for the input user, including
            /// the roles for each folder.
            /// The response also includes the folders assigned to the directory groups of
            /// the user.
            /// The distinction between the folders assigned directly to the user and the
            /// ones assigned to one of his groups
            /// can be made via the User field of the response.
            /// LIMITATION: If URI parameters contain special characters (eg. \, /), use
            /// instead api/FoldersNavigation/GetAllRolesForUser endpoint.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Folders or Folders.Read.
            ///
            /// Required permissions: (Units.View - Gets roles from all folders) and
            /// (SubFolders.View - Gets roles only from folders where caller has
            /// SubFolders.View permission) and (Users.View and Roles.View).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='username'>
            /// User name
            /// </param>
            /// <param name='skip'>
            /// </param>
            /// <param name='take'>
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserRoleAssignmentsDto> GetAllRolesForUserByUsernameAndSkipAndTakeAsync(this IFolders operations, string username, int skip, int take, string expand = default(string), string select = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllRolesForUserByUsernameAndSkipAndTakeWithHttpMessagesAsync(username, skip, take, expand, select, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the machines assigned to a folder.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Folders or Folders.Read.
            ///
            /// Required permissions: (Units.View or SubFolders.View) and (Machines.View).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='filter'>
            /// Restricts the set of items returned. The maximum number of expressions is
            /// 100.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            /// <param name='orderby'>
            /// Specifies the order in which items are returned. The maximum number of
            /// expressions is 5.
            /// </param>
            /// <param name='top'>
            /// Limits the number of items returned from a collection. The maximum value is
            /// 1000.
            /// </param>
            /// <param name='skip'>
            /// Excludes the specified number of items of the queried collection from the
            /// result.
            /// </param>
            /// <param name='count'>
            /// Indicates whether the total count of items within a collection are returned
            /// in the result.
            /// </param>
            public static ODataValueOfIEnumerableOfMachineFolderDto GetMachinesForFolderByKey(this IFolders operations, long key, string expand = default(string), string filter = default(string), string select = default(string), string orderby = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?))
            {
                return operations.GetMachinesForFolderByKeyAsync(key, expand, filter, select, orderby, top, skip, count).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the machines assigned to a folder.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Folders or Folders.Read.
            ///
            /// Required permissions: (Units.View or SubFolders.View) and (Machines.View).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='filter'>
            /// Restricts the set of items returned. The maximum number of expressions is
            /// 100.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            /// <param name='orderby'>
            /// Specifies the order in which items are returned. The maximum number of
            /// expressions is 5.
            /// </param>
            /// <param name='top'>
            /// Limits the number of items returned from a collection. The maximum value is
            /// 1000.
            /// </param>
            /// <param name='skip'>
            /// Excludes the specified number of items of the queried collection from the
            /// result.
            /// </param>
            /// <param name='count'>
            /// Indicates whether the total count of items within a collection are returned
            /// in the result.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataValueOfIEnumerableOfMachineFolderDto> GetMachinesForFolderByKeyAsync(this IFolders operations, long key, string expand = default(string), string filter = default(string), string select = default(string), string orderby = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMachinesForFolderByKeyWithHttpMessagesAsync(key, expand, filter, select, orderby, top, skip, count, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the users who have access to a folder and optionally the
            /// fine-grained roles each one
            /// has on that folder.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Folders or Folders.Read.
            ///
            /// Required permissions: (Units.View - Gets users for any folder) and
            /// (SubFolders.View - Gets users only if caller has SubFolders.View permission
            /// on folder) and (Users.View).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='includeInherited'>
            /// If true, the response will include users inherited from ancestors
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='filter'>
            /// Restricts the set of items returned. The maximum number of expressions is
            /// 100.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            /// <param name='orderby'>
            /// Specifies the order in which items are returned. The maximum number of
            /// expressions is 5.
            /// </param>
            /// <param name='top'>
            /// Limits the number of items returned from a collection. The maximum value is
            /// 1000.
            /// </param>
            /// <param name='skip'>
            /// Excludes the specified number of items of the queried collection from the
            /// result.
            /// </param>
            /// <param name='count'>
            /// Indicates whether the total count of items within a collection are returned
            /// in the result.
            /// </param>
            public static ODataValueOfIEnumerableOfUserRolesDto GetUsersForFolderByKeyAndIncludeinherited(this IFolders operations, long key, bool includeInherited, string expand = default(string), string filter = default(string), string select = default(string), string orderby = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?))
            {
                return operations.GetUsersForFolderByKeyAndIncludeinheritedAsync(key, includeInherited, expand, filter, select, orderby, top, skip, count).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the users who have access to a folder and optionally the
            /// fine-grained roles each one
            /// has on that folder.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Folders or Folders.Read.
            ///
            /// Required permissions: (Units.View - Gets users for any folder) and
            /// (SubFolders.View - Gets users only if caller has SubFolders.View permission
            /// on folder) and (Users.View).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='includeInherited'>
            /// If true, the response will include users inherited from ancestors
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='filter'>
            /// Restricts the set of items returned. The maximum number of expressions is
            /// 100.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            /// <param name='orderby'>
            /// Specifies the order in which items are returned. The maximum number of
            /// expressions is 5.
            /// </param>
            /// <param name='top'>
            /// Limits the number of items returned from a collection. The maximum value is
            /// 1000.
            /// </param>
            /// <param name='skip'>
            /// Excludes the specified number of items of the queried collection from the
            /// result.
            /// </param>
            /// <param name='count'>
            /// Indicates whether the total count of items within a collection are returned
            /// in the result.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataValueOfIEnumerableOfUserRolesDto> GetUsersForFolderByKeyAndIncludeinheritedAsync(this IFolders operations, long key, bool includeInherited, string expand = default(string), string filter = default(string), string select = default(string), string orderby = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUsersForFolderByKeyAndIncludeinheritedWithHttpMessagesAsync(key, includeInherited, expand, filter, select, orderby, top, skip, count, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
