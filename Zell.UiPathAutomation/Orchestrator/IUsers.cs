// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Zell.UiPathAutomation.Orchestrator
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Users operations.
    /// </summary>
    public partial interface IUsers
    {
        /// <summary>
        /// Gets users.
        /// </summary>
        /// <remarks>
        /// Client Credentials Flow required permissions: Users or Users.Read.
        ///
        /// Required permissions: Users.View.
        /// </remarks>
        /// <param name='expand'>
        /// Indicates the related entities to be represented inline. The
        /// maximum depth is 2.
        /// </param>
        /// <param name='filter'>
        /// Restricts the set of items returned. The maximum number of
        /// expressions is 100.
        /// </param>
        /// <param name='select'>
        /// Limits the properties returned in the result.
        /// </param>
        /// <param name='orderby'>
        /// Specifies the order in which items are returned. The maximum number
        /// of expressions is 5.
        /// </param>
        /// <param name='top'>
        /// Limits the number of items returned from a collection. The maximum
        /// value is 1000.
        /// </param>
        /// <param name='skip'>
        /// Excludes the specified number of items of the queried collection
        /// from the result.
        /// </param>
        /// <param name='count'>
        /// Indicates whether the total count of items within a collection are
        /// returned in the result.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<ODataValueOfIEnumerableOfUserDto>> GetWithHttpMessagesAsync(string expand = default(string), string filter = default(string), string select = default(string), string orderby = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Creates a new user.
        /// </summary>
        /// <remarks>
        /// Client Credentials Flow required permissions: Users or Users.Write.
        ///
        /// Required permissions: Users.Create.
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<UserDto>> PostWithHttpMessagesAsync(UserDto body = default(UserDto), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets a user based on its id.
        /// </summary>
        /// <remarks>
        /// Client Credentials Flow required permissions: Users or Users.Read.
        ///
        /// Requires authentication.
        /// </remarks>
        /// <param name='key'>
        /// </param>
        /// <param name='expand'>
        /// Indicates the related entities to be represented inline. The
        /// maximum depth is 2.
        /// </param>
        /// <param name='select'>
        /// Limits the properties returned in the result.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<UserDto>> GetByIdWithHttpMessagesAsync(long key, string expand = default(string), string select = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Edits a user.
        /// </summary>
        /// <remarks>
        /// Client Credentials Flow required permissions: Users or Users.Write.
        ///
        /// Required permissions: Users.Edit or Robots.Create or Robots.Edit or
        /// Robots.Delete.
        /// </remarks>
        /// <param name='key'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<UserDto>> PutByIdWithHttpMessagesAsync(long key, UserDto body = default(UserDto), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Partially updates a user.
        /// Cannot update roles or organization units via this endpoint.
        /// </summary>
        /// <remarks>
        /// Client Credentials Flow required permissions: Users or Users.Write.
        ///
        /// Requires authentication.
        /// </remarks>
        /// <param name='key'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        Task<HttpOperationResponse> PatchByIdWithHttpMessagesAsync(long key, UserDto body = default(UserDto), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Deletes a user.
        /// </summary>
        /// <remarks>
        /// Client Credentials Flow required permissions: Users or Users.Write.
        ///
        /// Required permissions: Users.Delete.
        /// </remarks>
        /// <param name='key'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        Task<HttpOperationResponse> DeleteByIdWithHttpMessagesAsync(long key, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Changes the culture for the specified user
        /// </summary>
        /// <remarks>
        /// Client Credentials Flow required permissions: Users or Users.Write.
        ///
        /// Required permissions: Users.Edit.
        /// </remarks>
        /// <param name='key'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        Task<HttpOperationResponse> ChangeUserCultureByIdWithHttpMessagesAsync(long key, UsersChangeUserCultureParameters body = default(UsersChangeUserCultureParameters), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Activate or deactivate a user
        /// </summary>
        /// <remarks>
        /// Client Credentials Flow required permissions: Users or Users.Write.
        ///
        /// Required permissions: Users.Edit.
        /// </remarks>
        /// <param name='key'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        Task<HttpOperationResponse> SetActiveByIdWithHttpMessagesAsync(long key, UsersSetActiveParameters body = default(UsersSetActiveParameters), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Associates/dissociates the given user with/from an organization
        /// unit based on toggle parameter.
        /// </summary>
        /// <remarks>
        /// Client Credentials Flow required permissions: Users or Users.Write.
        ///
        /// Required permissions: Users.Edit.
        /// </remarks>
        /// <param name='key'>
        /// </param>
        /// <param name='body'>
        /// &lt;para /&gt;Toggle - States whether to associate or to dissociate
        /// the organization unit with/from the user.
        /// &lt;para /&gt;OrganizationUnitId - The id of the organization unit
        /// to be associated/dissociated.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        Task<HttpOperationResponse> ToggleOrganizationUnitByIdWithHttpMessagesAsync(long key, UsersToggleOrganizationUnitParameters body = default(UsersToggleOrganizationUnitParameters), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Associates/dissociates the given user with/from a role based on
        /// toggle parameter.
        /// </summary>
        /// <remarks>
        /// Client Credentials Flow required permissions: Users or Users.Write.
        ///
        /// Required permissions: Users.Edit.
        /// </remarks>
        /// <param name='key'>
        /// </param>
        /// <param name='body'>
        /// &lt;para /&gt;Toggle - States whether to associate or to dissociate
        /// the role with/from the user.
        /// &lt;para /&gt;Role - The name of the role to be
        /// associated/dissociated.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        Task<HttpOperationResponse> ToggleRoleByIdWithHttpMessagesAsync(long key, UsersToggleRoleParameters body = default(UsersToggleRoleParameters), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Changes the culture for the current user
        /// </summary>
        /// <remarks>
        /// Client Credentials Flow required permissions: Users or Users.Write.
        ///
        /// Requires authentication.
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        Task<HttpOperationResponse> ChangeCultureWithHttpMessagesAsync(UsersChangeCultureParameters body = default(UsersChangeCultureParameters), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns a user permission collection containing data about the
        /// current user and all the permissions it has.
        /// </summary>
        /// <remarks>
        /// Client Credentials Flow required permissions: Users or Users.Read.
        ///
        /// Requires authentication.
        /// </remarks>
        /// <param name='expand'>
        /// Indicates the related entities to be represented inline. The
        /// maximum depth is 2.
        /// </param>
        /// <param name='select'>
        /// Limits the properties returned in the result.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<UserPermissionsCollection>> GetCurrentPermissionsWithHttpMessagesAsync(string expand = default(string), string select = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns details about the user currently logged into Orchestrator.
        /// </summary>
        /// <remarks>
        /// Client Credentials Flow required permissions: Users or Users.Read.
        /// </remarks>
        /// <param name='expand'>
        /// Indicates the related entities to be represented inline. The
        /// maximum depth is 2.
        /// </param>
        /// <param name='select'>
        /// Limits the properties returned in the result.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<UserDto>> GetCurrentUserWithHttpMessagesAsync(string expand = default(string), string select = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Imports from AD all users from the given group and associates them
        /// with given roles.
        /// </summary>
        /// <remarks>
        /// Client Credentials Flow required permissions: Users or Users.Write.
        ///
        /// Required permissions: Users.Create.
        /// </remarks>
        /// <param name='body'>
        /// &lt;para /&gt;Group - The name of the AD group whose users are to
        /// be imported.
        /// &lt;para /&gt;RolesList - The collection of roles the imported
        /// users will be associated with.
        /// &lt;para /&gt;OrganizationUnitIds - The collection of ids of the
        /// organization units the imported users will be associated with.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        Task<HttpOperationResponse> ImportUsersWithHttpMessagesAsync(UsersImportUsersParameters body = default(UsersImportUsersParameters), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
