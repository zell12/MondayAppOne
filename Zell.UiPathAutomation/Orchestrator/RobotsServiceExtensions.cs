// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Zell.UiPathAutomation.Orchestrator
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for RobotsService.
    /// </summary>
    public static partial class RobotsServiceExtensions
    {
            /// <summary>
            /// Begins a front-office session.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static RobotDetailsDto BeginSession(this IRobotsService operations, RobotIdentifier body = default(RobotIdentifier))
            {
                return operations.BeginSessionAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Begins a front-office session.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RobotDetailsDto> BeginSessionAsync(this IRobotsService operations, RobotIdentifier body = default(RobotIdentifier), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginSessionWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Ends the front-office session.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void EndSession(this IRobotsService operations, RobotIdentifier body = default(RobotIdentifier))
            {
                operations.EndSessionAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Ends the front-office session.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task EndSessionAsync(this IRobotsService operations, RobotIdentifier body = default(RobotIdentifier), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.EndSessionWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Called by RobotSvc to connect the Robots on the machine it is running on to
            /// Orchestrator (under automatic deployment).
            /// </summary>
            /// <remarks>
            /// This is the initial handshake between the robot service and Orchestrator,
            /// the equivalent of configuring the connection
            /// info from Robot tray (manual deployment). It is supported only for
            /// authorized machines, i.e. the robot machine is part of the
            /// same AD as Orchestrator. To enforce this, the request must contain the
            /// machine identity. The robots must be already provisioned
            /// in Orchestrator before this step, otherwise RobotSvc will continue to call
            /// this method until they are.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantId'>
            /// The tenant under which already defined robots are searched for.
            /// </param>
            /// <param name='domainName'>
            /// Domain name for the machine where robot is installed. If it's not provided,
            /// we'll use the one specified in web.config
            /// </param>
            public static ConnectionData GetConnectionData(this IRobotsService operations, int? tenantId = default(int?), string domainName = default(string))
            {
                return operations.GetConnectionDataAsync(tenantId, domainName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Called by RobotSvc to connect the Robots on the machine it is running on to
            /// Orchestrator (under automatic deployment).
            /// </summary>
            /// <remarks>
            /// This is the initial handshake between the robot service and Orchestrator,
            /// the equivalent of configuring the connection
            /// info from Robot tray (manual deployment). It is supported only for
            /// authorized machines, i.e. the robot machine is part of the
            /// same AD as Orchestrator. To enforce this, the request must contain the
            /// machine identity. The robots must be already provisioned
            /// in Orchestrator before this step, otherwise RobotSvc will continue to call
            /// this method until they are.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantId'>
            /// The tenant under which already defined robots are searched for.
            /// </param>
            /// <param name='domainName'>
            /// Domain name for the machine where robot is installed. If it's not provided,
            /// we'll use the one specified in web.config
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConnectionData> GetConnectionDataAsync(this IRobotsService operations, int? tenantId = default(int?), string domainName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetConnectionDataWithHttpMessagesAsync(tenantId, domainName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets from the server all the processes associated with a Robot.
            /// </summary>
            /// <remarks>
            /// Gets from the server all the processes associated with a Robot
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static IList<PublishedProcess> GetProcesses(this IRobotsService operations, RobotIdentifier body = default(RobotIdentifier))
            {
                return operations.GetProcessesAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets from the server all the processes associated with a Robot.
            /// </summary>
            /// <remarks>
            /// Gets from the server all the processes associated with a Robot
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<PublishedProcess>> GetProcessesAsync(this IRobotsService operations, RobotIdentifier body = default(RobotIdentifier), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProcessesWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Called by RobotSvc to connect the Robots on the machine it is running on to
            /// Orchestrator (under automatic deployment).
            /// </summary>
            /// <remarks>
            /// This is the initial handshake between the robot service and Orchestrator,
            /// the equivalent of configuring the connection
            /// info from Robot tray (manual deployment). It is supported only for
            /// authorized robots, i.e. robots using interactive authentication for login
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ConnectionData GetSharedConnectionData(this IRobotsService operations)
            {
                return operations.GetSharedConnectionDataAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Called by RobotSvc to connect the Robots on the machine it is running on to
            /// Orchestrator (under automatic deployment).
            /// </summary>
            /// <remarks>
            /// This is the initial handshake between the robot service and Orchestrator,
            /// the equivalent of configuring the connection
            /// info from Robot tray (manual deployment). It is supported only for
            /// authorized robots, i.e. robots using interactive authentication for login
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConnectionData> GetSharedConnectionDataAsync(this IRobotsService operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSharedConnectionDataWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Post to the server a collection of heartbeat messages generated by the
            /// Robots from a Machine
            /// </summary>
            /// <remarks>
            /// Every 30 seconds the UiPath service running on a Robot Machine posts a
            /// collection of heartbeat messages (one for each Robot hosted on the
            /// Machine).
            /// The response is a collection of commands specific to all the Robots defined
            /// on that Machine, including the ones that were added in the meanwhile.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static HeartbeatResponse Heartbeat(this IRobotsService operations, HeartbeatPayload body = default(HeartbeatPayload))
            {
                return operations.HeartbeatAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Post to the server a collection of heartbeat messages generated by the
            /// Robots from a Machine
            /// </summary>
            /// <remarks>
            /// Every 30 seconds the UiPath service running on a Robot Machine posts a
            /// collection of heartbeat messages (one for each Robot hosted on the
            /// Machine).
            /// The response is a collection of commands specific to all the Robots defined
            /// on that Machine, including the ones that were added in the meanwhile.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HeartbeatResponse> HeartbeatAsync(this IRobotsService operations, HeartbeatPayload body = default(HeartbeatPayload), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.HeartbeatWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Acquires licensing runtimes, updates machine's session state and reporting
            /// time.
            /// </summary>
            /// <remarks>
            /// Every 30 seconds the UiPath service sends a heartbeat.
            /// The response is a collection of commands specific to that machine.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static HeartbeatResponse HeartbeatV2(this IRobotsService operations, HeartbeatPayload body = default(HeartbeatPayload))
            {
                return operations.HeartbeatV2Async(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Acquires licensing runtimes, updates machine's session state and reporting
            /// time.
            /// </summary>
            /// <remarks>
            /// Every 30 seconds the UiPath service sends a heartbeat.
            /// The response is a collection of commands specific to that machine.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HeartbeatResponse> HeartbeatV2Async(this IRobotsService operations, HeartbeatPayload body = default(HeartbeatPayload), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.HeartbeatV2WithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets from the server all the Robots associated with a Machine and having
            /// the specified licenseKey.
            /// If the received payload contains the ServiceUserName, it returns only the
            /// Robot with that specific UserName.
            /// </summary>
            /// <remarks>
            /// Gets from the server all the Robots associated with a Machine and having
            /// the specified licenseKey.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static RobotServiceResponse StartService(this IRobotsService operations, RobotServicePayload body = default(RobotServicePayload))
            {
                return operations.StartServiceAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets from the server all the Robots associated with a Machine and having
            /// the specified licenseKey.
            /// If the received payload contains the ServiceUserName, it returns only the
            /// Robot with that specific UserName.
            /// </summary>
            /// <remarks>
            /// Gets from the server all the Robots associated with a Machine and having
            /// the specified licenseKey.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RobotServiceResponse> StartServiceAsync(this IRobotsService operations, RobotServicePayload body = default(RobotServicePayload), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StartServiceWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Called by RobotSvc to disconnect all Robots.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void StopService(this IRobotsService operations, HeartbeatPayload body = default(HeartbeatPayload))
            {
                operations.StopServiceAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Called by RobotSvc to disconnect all Robots.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StopServiceAsync(this IRobotsService operations, HeartbeatPayload body = default(HeartbeatPayload), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.StopServiceWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Post to the server a heartbeat collection with jobs information
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void SubmitJobState(this IRobotsService operations, IList<HeartbeatDto> body = default(IList<HeartbeatDto>))
            {
                operations.SubmitJobStateAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Post to the server a heartbeat collection with jobs information
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SubmitJobStateAsync(this IRobotsService operations, IList<HeartbeatDto> body = default(IList<HeartbeatDto>), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SubmitJobStateWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Uploads a screenshot for the given jobKey and robotKey.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='file'>
            /// </param>
            /// <param name='robotKey'>
            /// </param>
            /// <param name='jobKey'>
            /// </param>
            public static void UploadScreenshot(this IRobotsService operations, Stream file, string robotKey, string jobKey)
            {
                operations.UploadScreenshotAsync(file, robotKey, jobKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Uploads a screenshot for the given jobKey and robotKey.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='file'>
            /// </param>
            /// <param name='robotKey'>
            /// </param>
            /// <param name='jobKey'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UploadScreenshotAsync(this IRobotsService operations, Stream file, string robotKey, string jobKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UploadScreenshotWithHttpMessagesAsync(file, robotKey, jobKey, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
