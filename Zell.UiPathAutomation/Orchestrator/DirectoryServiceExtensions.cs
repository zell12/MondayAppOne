// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Zell.UiPathAutomation.Orchestrator
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DirectoryService.
    /// </summary>
    public static partial class DirectoryServiceExtensions
    {
            /// <summary>
            /// Gets directory permissions
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Users or Users.Read.
            ///
            /// Required permissions: Users.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='username'>
            /// </param>
            /// <param name='domain'>
            /// </param>
            public static IList<DirectoryPermissionDto> GetDirectoryPermissions(this IDirectoryService operations, string username = default(string), string domain = default(string))
            {
                return operations.GetDirectoryPermissionsAsync(username, domain).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets directory permissions
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Users or Users.Read.
            ///
            /// Required permissions: Users.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='username'>
            /// </param>
            /// <param name='domain'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<DirectoryPermissionDto>> GetDirectoryPermissionsAsync(this IDirectoryService operations, string username = default(string), string domain = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDirectoryPermissionsWithHttpMessagesAsync(username, domain, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets domains
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Users or Users.Read.
            ///
            /// Required permissions: Users.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<DomainDto> GetDomains(this IDirectoryService operations)
            {
                return operations.GetDomainsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets domains
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Users or Users.Read.
            ///
            /// Required permissions: Users.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<DomainDto>> GetDomainsAsync(this IDirectoryService operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDomainsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Search users and groups
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Users or Users.Read.
            ///
            /// Required permissions: Users.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='searchContext'>
            /// Possible values include: 'All', 'Users', 'Groups'
            /// </param>
            /// <param name='domain'>
            /// </param>
            /// <param name='prefix'>
            /// </param>
            public static IList<DirectoryObjectDto> SearchForUsersAndGroups(this IDirectoryService operations, SearchContext? searchContext = default(SearchContext?), string domain = default(string), string prefix = default(string))
            {
                return operations.SearchForUsersAndGroupsAsync(searchContext, domain, prefix).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Search users and groups
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Users or Users.Read.
            ///
            /// Required permissions: Users.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='searchContext'>
            /// Possible values include: 'All', 'Users', 'Groups'
            /// </param>
            /// <param name='domain'>
            /// </param>
            /// <param name='prefix'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<DirectoryObjectDto>> SearchForUsersAndGroupsAsync(this IDirectoryService operations, SearchContext? searchContext = default(SearchContext?), string domain = default(string), string prefix = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SearchForUsersAndGroupsWithHttpMessagesAsync(searchContext, domain, prefix, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
