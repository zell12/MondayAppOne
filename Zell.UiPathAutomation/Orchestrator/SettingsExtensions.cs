// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Zell.UiPathAutomation.Orchestrator
{
    using Models;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Settings.
    /// </summary>
    public static partial class SettingsExtensions
    {
            /// <summary>
            /// Gets the settings.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Read.
            ///
            /// Required permissions: Settings.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='filter'>
            /// Restricts the set of items returned. The maximum number of expressions is
            /// 100.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            /// <param name='orderby'>
            /// Specifies the order in which items are returned. The maximum number of
            /// expressions is 5.
            /// </param>
            /// <param name='top'>
            /// Limits the number of items returned from a collection. The maximum value is
            /// 1000.
            /// </param>
            /// <param name='skip'>
            /// Excludes the specified number of items of the queried collection from the
            /// result.
            /// </param>
            /// <param name='count'>
            /// Indicates whether the total count of items within a collection are returned
            /// in the result.
            /// </param>
            public static ODataValueOfIEnumerableOfSettingsDto Get(this ISettings operations, string expand = default(string), string filter = default(string), string select = default(string), string orderby = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?))
            {
                return operations.GetAsync(expand, filter, select, orderby, top, skip, count).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the settings.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Read.
            ///
            /// Required permissions: Settings.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='filter'>
            /// Restricts the set of items returned. The maximum number of expressions is
            /// 100.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            /// <param name='orderby'>
            /// Specifies the order in which items are returned. The maximum number of
            /// expressions is 5.
            /// </param>
            /// <param name='top'>
            /// Limits the number of items returned from a collection. The maximum value is
            /// 1000.
            /// </param>
            /// <param name='skip'>
            /// Excludes the specified number of items of the queried collection from the
            /// result.
            /// </param>
            /// <param name='count'>
            /// Indicates whether the total count of items within a collection are returned
            /// in the result.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataValueOfIEnumerableOfSettingsDto> GetAsync(this ISettings operations, string expand = default(string), string filter = default(string), string select = default(string), string orderby = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(expand, filter, select, orderby, top, skip, count, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a settings value based on its key.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Read.
            ///
            /// Required permissions: Settings.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            public static ODataValueOfString GetById(this ISettings operations, string key, string expand = default(string), string select = default(string))
            {
                return operations.GetByIdAsync(key, expand, select).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a settings value based on its key.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Read.
            ///
            /// Required permissions: Settings.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataValueOfString> GetByIdAsync(this ISettings operations, string key, string expand = default(string), string select = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByIdWithHttpMessagesAsync(key, expand, select, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Edits a setting.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Write.
            ///
            /// Required permissions: Settings.Edit.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static SettingsDto PutById(this ISettings operations, string key, SettingsDto body = default(SettingsDto))
            {
                return operations.PutByIdAsync(key, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Edits a setting.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Write.
            ///
            /// Required permissions: Settings.Edit.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SettingsDto> PutByIdAsync(this ISettings operations, string key, SettingsDto body = default(SettingsDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutByIdWithHttpMessagesAsync(key, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Uploads a new offline license activation.
            /// The content of the license is sent as a file embedded in the HTTP request.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Write.
            ///
            /// Required permissions: License.Create or License.Edit.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='file'>
            /// </param>
            public static void ActivateLicenseOffline(this ISettings operations, Stream file)
            {
                operations.ActivateLicenseOfflineAsync(file).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Uploads a new offline license activation.
            /// The content of the license is sent as a file embedded in the HTTP request.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Write.
            ///
            /// Required permissions: License.Create or License.Edit.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='file'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ActivateLicenseOfflineAsync(this ISettings operations, Stream file, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ActivateLicenseOfflineWithHttpMessagesAsync(file, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Activate the license for a specific tenant
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Write.
            ///
            /// Required permissions: License.Create or License.Edit.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void ActivateLicenseOnline(this ISettings operations, SettingsActivateLicenseOnlineParameters body = default(SettingsActivateLicenseOnlineParameters))
            {
                operations.ActivateLicenseOnlineAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Activate the license for a specific tenant
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Write.
            ///
            /// Required permissions: License.Create or License.Edit.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ActivateLicenseOnlineAsync(this ISettings operations, SettingsActivateLicenseOnlineParameters body = default(SettingsActivateLicenseOnlineParameters), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ActivateLicenseOnlineWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Deactivate the license for a specific tenant
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Write.
            ///
            /// Required permissions: License.Delete.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void DeactivateLicenseOnline(this ISettings operations)
            {
                operations.DeactivateLicenseOnlineAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deactivate the license for a specific tenant
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Write.
            ///
            /// Required permissions: License.Delete.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeactivateLicenseOnlineAsync(this ISettings operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeactivateLicenseOnlineWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Removes the license
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Write.
            ///
            /// Required permissions: License.Delete.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void DeleteLicense(this ISettings operations)
            {
                operations.DeleteLicenseAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes the license
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Write.
            ///
            /// Required permissions: License.Delete.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteLicenseAsync(this ISettings operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteLicenseWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns Orchestrator settings used by activities
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Read.
            ///
            /// Requires authentication.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            public static ActivitySettingsDto GetActivitySettings(this ISettings operations, string expand = default(string), string select = default(string))
            {
                return operations.GetActivitySettingsAsync(expand, select).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns Orchestrator settings used by activities
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Read.
            ///
            /// Requires authentication.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ActivitySettingsDto> GetActivitySettingsAsync(this ISettings operations, string expand = default(string), string select = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetActivitySettingsWithHttpMessagesAsync(expand, select, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the authentication settings
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Read.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            public static ResponseDictionaryDto GetAuthenticationSettings(this ISettings operations, string expand = default(string), string select = default(string))
            {
                return operations.GetAuthenticationSettingsAsync(expand, select).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the authentication settings
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Read.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResponseDictionaryDto> GetAuthenticationSettingsAsync(this ISettings operations, string expand = default(string), string select = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAuthenticationSettingsWithHttpMessagesAsync(expand, select, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets custom calendar, with excluded dates in UTC, for current tenant
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Read.
            ///
            /// Required permissions: Settings.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static CalendarDto GetCalendar(this ISettings operations, string expand = default(string), string select = default(string))
            {
                return operations.GetCalendarAsync(expand, select).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets custom calendar, with excluded dates in UTC, for current tenant
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Read.
            ///
            /// Required permissions: Settings.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static async Task<CalendarDto> GetCalendarAsync(this ISettings operations, string expand = default(string), string select = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCalendarWithHttpMessagesAsync(expand, select, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the connection string
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Read.
            ///
            /// Required permissions: Settings.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            public static ODataValueOfString GetConnectionString(this ISettings operations, string expand = default(string), string select = default(string))
            {
                return operations.GetConnectionStringAsync(expand, select).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the connection string
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Read.
            ///
            /// Required permissions: Settings.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataValueOfString> GetConnectionStringAsync(this ISettings operations, string expand = default(string), string select = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetConnectionStringWithHttpMessagesAsync(expand, select, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deactivate the license offline for a specific tenant
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Write.
            ///
            /// Required permissions: License.Delete.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            public static ODataValueOfString GetDeactivateLicenseOffline(this ISettings operations, string expand = default(string), string select = default(string))
            {
                return operations.GetDeactivateLicenseOfflineAsync(expand, select).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deactivate the license offline for a specific tenant
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Write.
            ///
            /// Required permissions: License.Delete.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataValueOfString> GetDeactivateLicenseOfflineAsync(this ISettings operations, string expand = default(string), string select = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDeactivateLicenseOfflineWithHttpMessagesAsync(expand, select, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the execution settings configuration (display name, value type, etc.).
            /// If scope is 0 (Global), the default values will be the initial ones. If
            /// scope is 1 (Robot), then
            /// the default values will be the actual values set globally.
            /// e.g., Resolution width
            /// Assume it was set globally to 720.
            /// Then within the config returned by this function, the default value for
            /// this setting will be:
            /// - 0 for scope = 0 and
            /// - 720 for scope = 1.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Read.
            ///
            /// Required permissions: Settings.Edit or Robots.Create or Robots.Edit.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope of the configuration; 0 for Global, 1 for Robot
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            public static ExecutionSettingsConfiguration GetExecutionSettingsConfigurationByScope(this ISettings operations, int scope, string expand = default(string), string select = default(string))
            {
                return operations.GetExecutionSettingsConfigurationByScopeAsync(scope, expand, select).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the execution settings configuration (display name, value type, etc.).
            /// If scope is 0 (Global), the default values will be the initial ones. If
            /// scope is 1 (Robot), then
            /// the default values will be the actual values set globally.
            /// e.g., Resolution width
            /// Assume it was set globally to 720.
            /// Then within the config returned by this function, the default value for
            /// this setting will be:
            /// - 0 for scope = 0 and
            /// - 720 for scope = 1.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Read.
            ///
            /// Required permissions: Settings.Edit or Robots.Create or Robots.Edit.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope of the configuration; 0 for Global, 1 for Robot
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ExecutionSettingsConfiguration> GetExecutionSettingsConfigurationByScopeAsync(this ISettings operations, int scope, string expand = default(string), string select = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetExecutionSettingsConfigurationByScopeWithHttpMessagesAsync(scope, expand, select, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets supported languages
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Read.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            public static ListResultDtoOfLanguageInfo GetLanguages(this ISettings operations, string expand = default(string), string select = default(string))
            {
                return operations.GetLanguagesAsync(expand, select).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets supported languages
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Read.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ListResultDtoOfLanguageInfo> GetLanguagesAsync(this ISettings operations, string expand = default(string), string select = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLanguagesWithHttpMessagesAsync(expand, select, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves the current license information.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Read.
            ///
            /// Requires authentication.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            public static LicenseDto GetLicense(this ISettings operations, string expand = default(string), string select = default(string))
            {
                return operations.GetLicenseAsync(expand, select).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the current license information.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Read.
            ///
            /// Requires authentication.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LicenseDto> GetLicenseAsync(this ISettings operations, string expand = default(string), string select = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLicenseWithHttpMessagesAsync(expand, select, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create the offline activation request for a specific tenant
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Write.
            ///
            /// Required permissions: License.Create or License.Edit.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            public static ODataValueOfString GetLicenseOffline(this ISettings operations, SettingsGetLicenseOfflineParameters body = default(SettingsGetLicenseOfflineParameters), string expand = default(string), string select = default(string))
            {
                return operations.GetLicenseOfflineAsync(body, expand, select).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create the offline activation request for a specific tenant
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Write.
            ///
            /// Required permissions: License.Create or License.Edit.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataValueOfString> GetLicenseOfflineAsync(this ISettings operations, SettingsGetLicenseOfflineParameters body = default(SettingsGetLicenseOfflineParameters), string expand = default(string), string select = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLicenseOfflineWithHttpMessagesAsync(body, expand, select, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the configuration format for a Secure store
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Read.
            ///
            /// Required permissions: Settings.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='storeTypeName'>
            /// name of the secure store type
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='filter'>
            /// Restricts the set of items returned. The maximum number of expressions is
            /// 100.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            /// <param name='orderby'>
            /// Specifies the order in which items are returned. The maximum number of
            /// expressions is 5.
            /// </param>
            /// <param name='count'>
            /// Indicates whether the total count of items within a collection are returned
            /// in the result.
            /// </param>
            public static ODataValueOfIEnumerableOfConfigurationEntry GetSecureStoreConfigurationByStoretypename(this ISettings operations, string storeTypeName, string expand = default(string), string filter = default(string), string select = default(string), string orderby = default(string), bool? count = default(bool?))
            {
                return operations.GetSecureStoreConfigurationByStoretypenameAsync(storeTypeName, expand, filter, select, orderby, count).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the configuration format for a Secure store
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Read.
            ///
            /// Required permissions: Settings.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='storeTypeName'>
            /// name of the secure store type
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='filter'>
            /// Restricts the set of items returned. The maximum number of expressions is
            /// 100.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            /// <param name='orderby'>
            /// Specifies the order in which items are returned. The maximum number of
            /// expressions is 5.
            /// </param>
            /// <param name='count'>
            /// Indicates whether the total count of items within a collection are returned
            /// in the result.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataValueOfIEnumerableOfConfigurationEntry> GetSecureStoreConfigurationByStoretypenameAsync(this ISettings operations, string storeTypeName, string expand = default(string), string filter = default(string), string select = default(string), string orderby = default(string), bool? count = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSecureStoreConfigurationByStoretypenameWithHttpMessagesAsync(storeTypeName, expand, filter, select, orderby, count, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a collection of key value pairs representing all service settings
            /// used by a robot. A valid robot license key is required in the request
            /// headers.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Read.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            public static ResponseDictionaryDto GetServicesSettings(this ISettings operations, string expand = default(string), string select = default(string))
            {
                return operations.GetServicesSettingsAsync(expand, select).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a collection of key value pairs representing all service settings
            /// used by a robot. A valid robot license key is required in the request
            /// headers.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Read.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResponseDictionaryDto> GetServicesSettingsAsync(this ISettings operations, string expand = default(string), string select = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetServicesSettingsWithHttpMessagesAsync(expand, select, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets timezones.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Read.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            public static ListResultDtoOfNameValueDto GetTimezones(this ISettings operations, string expand = default(string), string select = default(string))
            {
                return operations.GetTimezonesAsync(expand, select).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets timezones.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Read.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ListResultDtoOfNameValueDto> GetTimezonesAsync(this ISettings operations, string expand = default(string), string select = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTimezonesWithHttpMessagesAsync(expand, select, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a collection of key value pairs representing settings used by
            /// Orchestrator web client.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Read.
            ///
            /// Requires authentication.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            public static ResponseDictionaryDto GetWebSettings(this ISettings operations, string expand = default(string), string select = default(string))
            {
                return operations.GetWebSettingsAsync(expand, select).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a collection of key value pairs representing settings used by
            /// Orchestrator web client.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Read.
            ///
            /// Requires authentication.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResponseDictionaryDto> GetWebSettingsAsync(this ISettings operations, string expand = default(string), string select = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWebSettingsWithHttpMessagesAsync(expand, select, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sets custom calendar, with excluded dates in UTC, for current tenant
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Write.
            ///
            /// Required permissions: Settings.Edit.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static void SetCalendar(this ISettings operations, CalendarDto body = default(CalendarDto))
            {
                operations.SetCalendarAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sets custom calendar, with excluded dates in UTC, for current tenant
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Write.
            ///
            /// Required permissions: Settings.Edit.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static async Task SetCalendarAsync(this ISettings operations, CalendarDto body = default(CalendarDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SetCalendarWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates the current settings.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Write.
            ///
            /// Required permissions: Settings.Edit.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Settings - The collection of settings to be updated.
            /// </param>
            public static void UpdateBulk(this ISettings operations, SettingsUpdateBulkParameters body = default(SettingsUpdateBulkParameters))
            {
                operations.UpdateBulkAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the current settings.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Write.
            ///
            /// Required permissions: Settings.Edit.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Settings - The collection of settings to be updated.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateBulkAsync(this ISettings operations, SettingsUpdateBulkParameters body = default(SettingsUpdateBulkParameters), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateBulkWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Update the license for a specific tenant
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Write.
            ///
            /// Required permissions: License.Edit.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void UpdateLicenseOnline(this ISettings operations)
            {
                operations.UpdateLicenseOnlineAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the license for a specific tenant
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Write.
            ///
            /// Required permissions: License.Edit.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateLicenseOnlineAsync(this ISettings operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateLicenseOnlineWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Edits a user setting.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Write.
            ///
            /// Requires authentication.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            public static SettingsDto UpdateUserSetting(this ISettings operations, SettingsUpdateUserSettingParameters body = default(SettingsUpdateUserSettingParameters), string expand = default(string), string select = default(string))
            {
                return operations.UpdateUserSettingAsync(body, expand, select).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Edits a user setting.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Write.
            ///
            /// Requires authentication.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SettingsDto> UpdateUserSettingAsync(this ISettings operations, SettingsUpdateUserSettingParameters body = default(SettingsUpdateUserSettingParameters), string expand = default(string), string select = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateUserSettingWithHttpMessagesAsync(body, expand, select, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Uploads a new license file that was previously generated with Regutil. The
            /// content of the license is sent as a file embedded in the HTTP request.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Write.
            ///
            /// Required permissions: License.Create or License.Edit.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='file'>
            /// </param>
            public static void UploadLicense(this ISettings operations, Stream file)
            {
                operations.UploadLicenseAsync(file).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Uploads a new license file that was previously generated with Regutil. The
            /// content of the license is sent as a file embedded in the HTTP request.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Write.
            ///
            /// Required permissions: License.Create or License.Edit.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='file'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UploadLicenseAsync(this ISettings operations, Stream file, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UploadLicenseWithHttpMessagesAsync(file, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Verify whether the given SMTP settings are correct or not by sending an
            /// email to a recipient.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Write.
            ///
            /// Required permissions: Settings.Edit.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// SMTP setting parameters
            /// </param>
            public static void VerifySmtpSetting(this ISettings operations, SettingsVerifySmtpSettingParameters body = default(SettingsVerifySmtpSettingParameters))
            {
                operations.VerifySmtpSettingAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Verify whether the given SMTP settings are correct or not by sending an
            /// email to a recipient.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Write.
            ///
            /// Required permissions: Settings.Edit.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// SMTP setting parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task VerifySmtpSettingAsync(this ISettings operations, SettingsVerifySmtpSettingParameters body = default(SettingsVerifySmtpSettingParameters), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.VerifySmtpSettingWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
