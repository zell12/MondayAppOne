// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Zell.UiPathAutomation.Orchestrator
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Calendars.
    /// </summary>
    public static partial class CalendarsExtensions
    {
            /// <summary>
            /// Gets calendars for current tenant.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Read.
            ///
            /// Requires authentication.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='filter'>
            /// Restricts the set of items returned. The maximum number of expressions is
            /// 100. The allowed functions are: allfunctions.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            /// <param name='orderby'>
            /// Specifies the order in which items are returned. The maximum number of
            /// expressions is 5. The allowed properties are: Name, Id.
            /// </param>
            /// <param name='top'>
            /// Limits the number of items returned from a collection.
            /// </param>
            /// <param name='skip'>
            /// Excludes the specified number of items of the queried collection from the
            /// result.
            /// </param>
            /// <param name='count'>
            /// Indicates whether the total count of items within a collection are returned
            /// in the result.
            /// </param>
            public static ODataValueOfIEnumerableOfExtendedCalendarDto Get(this ICalendars operations, string expand = default(string), string filter = default(string), string select = default(string), string orderby = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?))
            {
                return operations.GetAsync(expand, filter, select, orderby, top, skip, count).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets calendars for current tenant.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Read.
            ///
            /// Requires authentication.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='filter'>
            /// Restricts the set of items returned. The maximum number of expressions is
            /// 100. The allowed functions are: allfunctions.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            /// <param name='orderby'>
            /// Specifies the order in which items are returned. The maximum number of
            /// expressions is 5. The allowed properties are: Name, Id.
            /// </param>
            /// <param name='top'>
            /// Limits the number of items returned from a collection.
            /// </param>
            /// <param name='skip'>
            /// Excludes the specified number of items of the queried collection from the
            /// result.
            /// </param>
            /// <param name='count'>
            /// Indicates whether the total count of items within a collection are returned
            /// in the result.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataValueOfIEnumerableOfExtendedCalendarDto> GetAsync(this ICalendars operations, string expand = default(string), string filter = default(string), string select = default(string), string orderby = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(expand, filter, select, orderby, top, skip, count, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new calendar.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Write.
            ///
            /// Required permissions: (Settings.Create).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ExtendedCalendarDto Post(this ICalendars operations, ExtendedCalendarDto body = default(ExtendedCalendarDto))
            {
                return operations.PostAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new calendar.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Write.
            ///
            /// Required permissions: (Settings.Create).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ExtendedCalendarDto> PostAsync(this ICalendars operations, ExtendedCalendarDto body = default(ExtendedCalendarDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets calendar based on its id.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Read.
            ///
            /// Requires authentication.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            public static ExtendedCalendarDto GetById(this ICalendars operations, long key, string expand = default(string), string select = default(string))
            {
                return operations.GetByIdAsync(key, expand, select).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets calendar based on its id.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Read.
            ///
            /// Requires authentication.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ExtendedCalendarDto> GetByIdAsync(this ICalendars operations, long key, string expand = default(string), string select = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByIdWithHttpMessagesAsync(key, expand, select, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Edits a calendar.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Write.
            ///
            /// Required permissions: (Settings.Edit).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ExtendedCalendarDto PutById(this ICalendars operations, long key, ExtendedCalendarDto body = default(ExtendedCalendarDto))
            {
                return operations.PutByIdAsync(key, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Edits a calendar.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Write.
            ///
            /// Required permissions: (Settings.Edit).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ExtendedCalendarDto> PutByIdAsync(this ICalendars operations, long key, ExtendedCalendarDto body = default(ExtendedCalendarDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutByIdWithHttpMessagesAsync(key, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a calendar.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Write.
            ///
            /// Required permissions: (Settings.Delete).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            public static void DeleteById(this ICalendars operations, long key)
            {
                operations.DeleteByIdAsync(key).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a calendar.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Write.
            ///
            /// Required permissions: (Settings.Delete).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteByIdAsync(this ICalendars operations, long key, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteByIdWithHttpMessagesAsync(key, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Validate calendar name, and check if it already exists.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Write.
            ///
            /// Required permissions: (Settings.Edit).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            public static ODataValueOfBoolean CalendarExists(this ICalendars operations, CalendarsCalendarExistsParameters body = default(CalendarsCalendarExistsParameters), string expand = default(string), string select = default(string))
            {
                return operations.CalendarExistsAsync(body, expand, select).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Validate calendar name, and check if it already exists.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Write.
            ///
            /// Required permissions: (Settings.Edit).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataValueOfBoolean> CalendarExistsAsync(this ICalendars operations, CalendarsCalendarExistsParameters body = default(CalendarsCalendarExistsParameters), string expand = default(string), string select = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CalendarExistsWithHttpMessagesAsync(body, expand, select, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
