// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Zell.UiPathAutomation.Orchestrator
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// DirectoryService operations.
    /// </summary>
    public partial interface IDirectoryService
    {
        /// <summary>
        /// Gets directory permissions
        /// </summary>
        /// <remarks>
        /// Client Credentials Flow required permissions: Users or Users.Read.
        ///
        /// Required permissions: Users.View.
        /// </remarks>
        /// <param name='username'>
        /// </param>
        /// <param name='domain'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<IList<DirectoryPermissionDto>>> GetDirectoryPermissionsWithHttpMessagesAsync(string username = default(string), string domain = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets domains
        /// </summary>
        /// <remarks>
        /// Client Credentials Flow required permissions: Users or Users.Read.
        ///
        /// Required permissions: Users.View.
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<IList<DomainDto>>> GetDomainsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Search users and groups
        /// </summary>
        /// <remarks>
        /// Client Credentials Flow required permissions: Users or Users.Read.
        ///
        /// Required permissions: Users.View.
        /// </remarks>
        /// <param name='searchContext'>
        /// Possible values include: 'All', 'Users', 'Groups'
        /// </param>
        /// <param name='domain'>
        /// </param>
        /// <param name='prefix'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<IList<DirectoryObjectDto>>> SearchForUsersAndGroupsWithHttpMessagesAsync(SearchContext? searchContext = default(SearchContext?), string domain = default(string), string prefix = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
