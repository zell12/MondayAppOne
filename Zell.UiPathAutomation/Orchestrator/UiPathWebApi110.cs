// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Zell.UiPathAutomation.Orchestrator
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Net;
    using System.Net.Http;

    /// <summary>
    /// Orchestrator API
    /// </summary>
    public partial class UiPathWebApi110 : ServiceClient<UiPathWebApi110>, IUiPathWebApi110
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public JsonSerializerSettings DeserializationSettings { get; private set; }

        /// <summary>
        /// Gets the IAccount.
        /// </summary>
        public virtual IAccount Account { get; private set; }

        /// <summary>
        /// Gets the IToken.
        /// </summary>
        public virtual IToken Token { get; private set; }

        /// <summary>
        /// Gets the IDirectoryService.
        /// </summary>
        public virtual IDirectoryService DirectoryService { get; private set; }

        /// <summary>
        /// Gets the IFoldersNavigation.
        /// </summary>
        public virtual IFoldersNavigation FoldersNavigation { get; private set; }

        /// <summary>
        /// Gets the ILicensing.
        /// </summary>
        public virtual ILicensing Licensing { get; private set; }

        /// <summary>
        /// Gets the ILogs.
        /// </summary>
        public virtual ILogs Logs { get; private set; }

        /// <summary>
        /// Gets the IMaintenance.
        /// </summary>
        public virtual IMaintenance Maintenance { get; private set; }

        /// <summary>
        /// Gets the IRobotsService.
        /// </summary>
        public virtual IRobotsService RobotsService { get; private set; }

        /// <summary>
        /// Gets the IStats.
        /// </summary>
        public virtual IStats Stats { get; private set; }

        /// <summary>
        /// Gets the IStatus.
        /// </summary>
        public virtual IStatus Status { get; private set; }

        /// <summary>
        /// Gets the ITestAutomation.
        /// </summary>
        public virtual ITestAutomation TestAutomation { get; private set; }

        /// <summary>
        /// Gets the ITestDataQueueActions.
        /// </summary>
        public virtual ITestDataQueueActions TestDataQueueActions { get; private set; }

        /// <summary>
        /// Gets the ITranslations.
        /// </summary>
        public virtual ITranslations Translations { get; private set; }

        /// <summary>
        /// Gets the ITaskForms.
        /// </summary>
        public virtual ITaskForms TaskForms { get; private set; }

        /// <summary>
        /// Gets the IAlerts.
        /// </summary>
        public virtual IAlerts Alerts { get; private set; }

        /// <summary>
        /// Gets the IAssets.
        /// </summary>
        public virtual IAssets Assets { get; private set; }

        /// <summary>
        /// Gets the IAuditLogs.
        /// </summary>
        public virtual IAuditLogs AuditLogs { get; private set; }

        /// <summary>
        /// Gets the IBuckets.
        /// </summary>
        public virtual IBuckets Buckets { get; private set; }

        /// <summary>
        /// Gets the ICalendars.
        /// </summary>
        public virtual ICalendars Calendars { get; private set; }

        /// <summary>
        /// Gets the ICredentialStores.
        /// </summary>
        public virtual ICredentialStores CredentialStores { get; private set; }

        /// <summary>
        /// Gets the IEnvironments.
        /// </summary>
        public virtual IEnvironments Environments { get; private set; }

        /// <summary>
        /// Gets the IExecutionMedia.
        /// </summary>
        public virtual IExecutionMedia ExecutionMedia { get; private set; }

        /// <summary>
        /// Gets the IFolders.
        /// </summary>
        public virtual IFolders Folders { get; private set; }

        /// <summary>
        /// Gets the IHostLicenses.
        /// </summary>
        public virtual IHostLicenses HostLicenses { get; private set; }

        /// <summary>
        /// Gets the IJobs.
        /// </summary>
        public virtual IJobs Jobs { get; private set; }

        /// <summary>
        /// Gets the IJobTriggers.
        /// </summary>
        public virtual IJobTriggers JobTriggers { get; private set; }

        /// <summary>
        /// Gets the ILibraries.
        /// </summary>
        public virtual ILibraries Libraries { get; private set; }

        /// <summary>
        /// Gets the ILicensesNamedUser.
        /// </summary>
        public virtual ILicensesNamedUser LicensesNamedUser { get; private set; }

        /// <summary>
        /// Gets the ILicensesRuntime.
        /// </summary>
        public virtual ILicensesRuntime LicensesRuntime { get; private set; }

        /// <summary>
        /// Gets the IMachines.
        /// </summary>
        public virtual IMachines Machines { get; private set; }

        /// <summary>
        /// Gets the IMessageTemplates.
        /// </summary>
        public virtual IMessageTemplates MessageTemplates { get; private set; }

        /// <summary>
        /// Gets the IOrganizationUnits.
        /// </summary>
        public virtual IOrganizationUnits OrganizationUnits { get; private set; }

        /// <summary>
        /// Gets the IPermissions.
        /// </summary>
        public virtual IPermissions Permissions { get; private set; }

        /// <summary>
        /// Gets the IProcesses.
        /// </summary>
        public virtual IProcesses Processes { get; private set; }

        /// <summary>
        /// Gets the IProcessSchedules.
        /// </summary>
        public virtual IProcessSchedules ProcessSchedules { get; private set; }

        /// <summary>
        /// Gets the IQueueDefinitions.
        /// </summary>
        public virtual IQueueDefinitions QueueDefinitions { get; private set; }

        /// <summary>
        /// Gets the IQueueItemComments.
        /// </summary>
        public virtual IQueueItemComments QueueItemComments { get; private set; }

        /// <summary>
        /// Gets the IQueueItemEvents.
        /// </summary>
        public virtual IQueueItemEvents QueueItemEvents { get; private set; }

        /// <summary>
        /// Gets the IQueueItems.
        /// </summary>
        public virtual IQueueItems QueueItems { get; private set; }

        /// <summary>
        /// Gets the IQueueProcessingRecords.
        /// </summary>
        public virtual IQueueProcessingRecords QueueProcessingRecords { get; private set; }

        /// <summary>
        /// Gets the IQueues.
        /// </summary>
        public virtual IQueues Queues { get; private set; }

        /// <summary>
        /// Gets the IReleases.
        /// </summary>
        public virtual IReleases Releases { get; private set; }

        /// <summary>
        /// Gets the IRobotLogs.
        /// </summary>
        public virtual IRobotLogs RobotLogs { get; private set; }

        /// <summary>
        /// Gets the IRobots.
        /// </summary>
        public virtual IRobots Robots { get; private set; }

        /// <summary>
        /// Gets the IRoles.
        /// </summary>
        public virtual IRoles Roles { get; private set; }

        /// <summary>
        /// Gets the ISessions.
        /// </summary>
        public virtual ISessions Sessions { get; private set; }

        /// <summary>
        /// Gets the ISettings.
        /// </summary>
        public virtual ISettings Settings { get; private set; }

        /// <summary>
        /// Gets the ITaskCatalogs.
        /// </summary>
        public virtual ITaskCatalogs TaskCatalogs { get; private set; }

        /// <summary>
        /// Gets the ITasks.
        /// </summary>
        public virtual ITasks Tasks { get; private set; }

        /// <summary>
        /// Gets the ITenants.
        /// </summary>
        public virtual ITenants Tenants { get; private set; }

        /// <summary>
        /// Gets the ITestCaseDefinitions.
        /// </summary>
        public virtual ITestCaseDefinitions TestCaseDefinitions { get; private set; }

        /// <summary>
        /// Gets the ITestCaseExecutions.
        /// </summary>
        public virtual ITestCaseExecutions TestCaseExecutions { get; private set; }

        /// <summary>
        /// Gets the ITestDataQueueItems.
        /// </summary>
        public virtual ITestDataQueueItems TestDataQueueItems { get; private set; }

        /// <summary>
        /// Gets the ITestDataQueues.
        /// </summary>
        public virtual ITestDataQueues TestDataQueues { get; private set; }

        /// <summary>
        /// Gets the ITestSetExecutions.
        /// </summary>
        public virtual ITestSetExecutions TestSetExecutions { get; private set; }

        /// <summary>
        /// Gets the ITestSets.
        /// </summary>
        public virtual ITestSets TestSets { get; private set; }

        /// <summary>
        /// Gets the ITestSetSchedules.
        /// </summary>
        public virtual ITestSetSchedules TestSetSchedules { get; private set; }

        /// <summary>
        /// Gets the IUserLoginAttempts.
        /// </summary>
        public virtual IUserLoginAttempts UserLoginAttempts { get; private set; }

        /// <summary>
        /// Gets the IUsers.
        /// </summary>
        public virtual IUsers Users { get; private set; }

        /// <summary>
        /// Gets the IWebhooks.
        /// </summary>
        public virtual IWebhooks Webhooks { get; private set; }

        /// <summary>
        /// Gets the IGenericTasks.
        /// </summary>
        public virtual IGenericTasks GenericTasks { get; private set; }

        #region R.A. > Constructor for Dependency injection
        
        public UiPathWebApi110(HttpClient httpClient) : base(httpClient)
        {
            //BaseUri = uri;
            Initialize();
        }
        #endregion

        /// <summary>
        /// Initializes a new instance of the UiPathWebApi110 class.
        /// </summary>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling UiPathWebApi110.Dispose(). False: will not dispose provided httpClient</param>
        public UiPathWebApi110(HttpClient httpClient, bool disposeHttpClient) : base(httpClient, disposeHttpClient)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the UiPathWebApi110 class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public UiPathWebApi110(params DelegatingHandler[] handlers) : base(handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the UiPathWebApi110 class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public UiPathWebApi110(HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the UiPathWebApi110 class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public UiPathWebApi110(System.Uri baseUri, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the UiPathWebApi110 class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public UiPathWebApi110(System.Uri baseUri, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// An optional partial-method to perform custom initialization.
        ///</summary>
        partial void CustomInitialize();
        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            Account = new Account(this);
            Token = new Token(this);
            DirectoryService = new DirectoryService(this);
            FoldersNavigation = new FoldersNavigation(this);
            Licensing = new Licensing(this);
            Logs = new Logs(this);
            Maintenance = new Maintenance(this);
            RobotsService = new RobotsService(this);
            Stats = new Stats(this);
            Status = new Status(this);
            TestAutomation = new TestAutomation(this);
            TestDataQueueActions = new TestDataQueueActions(this);
            Translations = new Translations(this);
            TaskForms = new TaskForms(this);
            Alerts = new Alerts(this);
            Assets = new Assets(this);
            AuditLogs = new AuditLogs(this);
            Buckets = new Buckets(this);
            Calendars = new Calendars(this);
            CredentialStores = new CredentialStores(this);
            Environments = new Environments(this);
            ExecutionMedia = new ExecutionMedia(this);
            Folders = new Folders(this);
            HostLicenses = new HostLicenses(this);
            Jobs = new Jobs(this);
            JobTriggers = new JobTriggers(this);
            Libraries = new Libraries(this);
            LicensesNamedUser = new LicensesNamedUser(this);
            LicensesRuntime = new LicensesRuntime(this);
            Machines = new Machines(this);
            MessageTemplates = new MessageTemplates(this);
            OrganizationUnits = new OrganizationUnits(this);
            Permissions = new Permissions(this);
            Processes = new Processes(this);
            ProcessSchedules = new ProcessSchedules(this);
            QueueDefinitions = new QueueDefinitions(this);
            QueueItemComments = new QueueItemComments(this);
            QueueItemEvents = new QueueItemEvents(this);
            QueueItems = new QueueItems(this);
            QueueProcessingRecords = new QueueProcessingRecords(this);
            Queues = new Queues(this);
            Releases = new Releases(this);
            RobotLogs = new RobotLogs(this);
            Robots = new Robots(this);
            Roles = new Roles(this);
            Sessions = new Sessions(this);
            Settings = new Settings(this);
            TaskCatalogs = new TaskCatalogs(this);
            Tasks = new Tasks(this);
            Tenants = new Tenants(this);
            TestCaseDefinitions = new TestCaseDefinitions(this);
            TestCaseExecutions = new TestCaseExecutions(this);
            TestDataQueueItems = new TestDataQueueItems(this);
            TestDataQueues = new TestDataQueues(this);
            TestSetExecutions = new TestSetExecutions(this);
            TestSets = new TestSets(this);
            TestSetSchedules = new TestSetSchedules(this);
            UserLoginAttempts = new UserLoginAttempts(this);
            Users = new Users(this);
            Webhooks = new Webhooks(this);
            GenericTasks = new GenericTasks(this);
            BaseUri = new System.Uri("https://cloud.uipath.com/UiPatcmful/UiPathDefault");
            
            SerializationSettings = new JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new  List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            DeserializationSettings = new JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            CustomInitialize();
        }
    }
}
