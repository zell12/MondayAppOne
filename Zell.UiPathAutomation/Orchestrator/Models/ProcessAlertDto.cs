// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Zell.UiPathAutomation.Orchestrator.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class ProcessAlertDto
    {
        /// <summary>
        /// Initializes a new instance of the ProcessAlertDto class.
        /// </summary>
        public ProcessAlertDto()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ProcessAlertDto class.
        /// </summary>
        /// <param name="severity">Possible values include: 'Info', 'Success',
        /// 'Warn', 'Error', 'Fatal'</param>
        public ProcessAlertDto(string message, ProcessAlertDtoSeverity severity, string robotName, string processName, System.Guid? id = default(System.Guid?))
        {
            Message = message;
            Severity = severity;
            RobotName = robotName;
            ProcessName = processName;
            Id = id;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Message")]
        public string Message { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Info', 'Success', 'Warn',
        /// 'Error', 'Fatal'
        /// </summary>
        [JsonProperty(PropertyName = "Severity")]
        public ProcessAlertDtoSeverity Severity { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "RobotName")]
        public string RobotName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ProcessName")]
        public string ProcessName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Id")]
        public System.Guid? Id { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Message == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Message");
            }
            if (RobotName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "RobotName");
            }
            if (ProcessName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ProcessName");
            }
            if (Message != null)
            {
                if (Message.Length > 512)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Message", 512);
                }
                if (Message.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Message", 0);
                }
            }
            if (RobotName != null)
            {
                if (RobotName.Length > 512)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "RobotName", 512);
                }
                if (RobotName.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "RobotName", 0);
                }
            }
            if (ProcessName != null)
            {
                if (ProcessName.Length > 512)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "ProcessName", 512);
                }
                if (ProcessName.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "ProcessName", 0);
                }
            }
        }
    }
}
