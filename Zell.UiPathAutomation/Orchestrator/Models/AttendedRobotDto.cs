// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Zell.UiPathAutomation.Orchestrator.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class AttendedRobotDto
    {
        /// <summary>
        /// Initializes a new instance of the AttendedRobotDto class.
        /// </summary>
        public AttendedRobotDto()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AttendedRobotDto class.
        /// </summary>
        /// <param name="userName">The UserName used to authenticate on the
        /// Host Machine.</param>
        /// <param name="executionSettings">An object containing execution
        /// settings for the Robot.</param>
        /// <param name="robotId">The actual Id of the provisioned
        /// Robot.</param>
        /// <param name="robotType">The actual Type of the provisioned Robot.
        /// Possible values include: 'NonProduction', 'Attended', 'Unattended',
        /// 'Studio', 'Development', 'StudioX', 'Headless', 'StudioPro',
        /// 'TestAutomation'</param>
        public AttendedRobotDto(string userName = default(string), IDictionary<string, object> executionSettings = default(IDictionary<string, object>), long? robotId = default(long?), AttendedRobotDtoRobotType? robotType = default(AttendedRobotDtoRobotType?))
        {
            UserName = userName;
            ExecutionSettings = executionSettings;
            RobotId = robotId;
            RobotType = robotType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the UserName used to authenticate on the Host Machine.
        /// </summary>
        [JsonProperty(PropertyName = "UserName")]
        public string UserName { get; set; }

        /// <summary>
        /// Gets or sets an object containing execution settings for the Robot.
        /// </summary>
        [JsonProperty(PropertyName = "ExecutionSettings")]
        public IDictionary<string, object> ExecutionSettings { get; set; }

        /// <summary>
        /// Gets or sets the actual Id of the provisioned Robot.
        /// </summary>
        [JsonProperty(PropertyName = "RobotId")]
        public long? RobotId { get; set; }

        /// <summary>
        /// Gets or sets the actual Type of the provisioned Robot. Possible
        /// values include: 'NonProduction', 'Attended', 'Unattended',
        /// 'Studio', 'Development', 'StudioX', 'Headless', 'StudioPro',
        /// 'TestAutomation'
        /// </summary>
        [JsonProperty(PropertyName = "RobotType")]
        public AttendedRobotDtoRobotType? RobotType { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (UserName != null)
            {
                if (UserName.Length > 100)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "UserName", 100);
                }
                if (UserName.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "UserName", 0);
                }
            }
        }
    }
}
