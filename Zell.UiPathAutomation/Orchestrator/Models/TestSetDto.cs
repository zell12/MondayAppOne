// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Zell.UiPathAutomation.Orchestrator.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class TestSetDto
    {
        /// <summary>
        /// Initializes a new instance of the TestSetDto class.
        /// </summary>
        public TestSetDto()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TestSetDto class.
        /// </summary>
        /// <param name="sourceType">Possible values include: 'User',
        /// 'ExternalTool'</param>
        public TestSetDto(string name, IList<TestSetPackageDto> packages, IList<TestCaseDto> testCases, string description = default(string), TestSetDtoSourceType? sourceType = default(TestSetDtoSourceType?), long? organizationUnitId = default(long?), long? environmentId = default(long?), TestEnvironmentDto environment = default(TestEnvironmentDto), int? testCaseCount = default(int?), bool? isDeleted = default(bool?), long? deleterUserId = default(long?), System.DateTime? deletionTime = default(System.DateTime?), System.DateTime? lastModificationTime = default(System.DateTime?), long? lastModifierUserId = default(long?), System.DateTime? creationTime = default(System.DateTime?), long? creatorUserId = default(long?), long? id = default(long?))
        {
            Name = name;
            Description = description;
            SourceType = sourceType;
            OrganizationUnitId = organizationUnitId;
            EnvironmentId = environmentId;
            Environment = environment;
            TestCaseCount = testCaseCount;
            Packages = packages;
            TestCases = testCases;
            IsDeleted = isDeleted;
            DeleterUserId = deleterUserId;
            DeletionTime = deletionTime;
            LastModificationTime = lastModificationTime;
            LastModifierUserId = lastModifierUserId;
            CreationTime = creationTime;
            CreatorUserId = creatorUserId;
            Id = id;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'User', 'ExternalTool'
        /// </summary>
        [JsonProperty(PropertyName = "SourceType")]
        public TestSetDtoSourceType? SourceType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "OrganizationUnitId")]
        public long? OrganizationUnitId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EnvironmentId")]
        public long? EnvironmentId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Environment")]
        public TestEnvironmentDto Environment { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "TestCaseCount")]
        public int? TestCaseCount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Packages")]
        public IList<TestSetPackageDto> Packages { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "TestCases")]
        public IList<TestCaseDto> TestCases { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsDeleted")]
        public bool? IsDeleted { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "DeleterUserId")]
        public long? DeleterUserId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "DeletionTime")]
        public System.DateTime? DeletionTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "LastModificationTime")]
        public System.DateTime? LastModificationTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "LastModifierUserId")]
        public long? LastModifierUserId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CreationTime")]
        public System.DateTime? CreationTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CreatorUserId")]
        public long? CreatorUserId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Id")]
        public long? Id { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Packages == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Packages");
            }
            if (TestCases == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TestCases");
            }
            if (Packages != null)
            {
                foreach (var element in Packages)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (TestCases != null)
            {
                foreach (var element1 in TestCases)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
