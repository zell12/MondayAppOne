// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Zell.UiPathAutomation.Orchestrator.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class ExecutionMediaDto
    {
        /// <summary>
        /// Initializes a new instance of the ExecutionMediaDto class.
        /// </summary>
        public ExecutionMediaDto()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ExecutionMediaDto class.
        /// </summary>
        public ExecutionMediaDto(string storageLocation = default(string), string name = default(string), long? jobId = default(long?), string releaseName = default(string), long? id = default(long?))
        {
            StorageLocation = storageLocation;
            Name = name;
            JobId = jobId;
            ReleaseName = releaseName;
            Id = id;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "StorageLocation")]
        public string StorageLocation { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "JobId")]
        public long? JobId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ReleaseName")]
        public string ReleaseName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Id")]
        public long? Id { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (StorageLocation != null)
            {
                if (StorageLocation.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "StorageLocation", 255);
                }
                if (StorageLocation.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "StorageLocation", 0);
                }
            }
            if (Name != null)
            {
                if (Name.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Name", 255);
                }
                if (Name.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Name", 0);
                }
            }
        }
    }
}
