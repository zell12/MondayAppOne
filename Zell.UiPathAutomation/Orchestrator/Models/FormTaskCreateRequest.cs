// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Zell.UiPathAutomation.Orchestrator.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Class with only attributes needed for Creating Task (TaskType =
    /// TaskType.FormTask)
    /// </summary>
    public partial class FormTaskCreateRequest
    {
        /// <summary>
        /// Initializes a new instance of the FormTaskCreateRequest class.
        /// </summary>
        public FormTaskCreateRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the FormTaskCreateRequest class.
        /// </summary>
        /// <param name="title">Gets or sets title of this task.</param>
        /// <param name="formLayout">Text representing the form layout
        /// schema</param>
        /// <param name="priority">Gets or sets priority of this task. Possible
        /// values include: 'Low', 'Medium', 'High', 'Critical'</param>
        /// <param name="data">Task data</param>
        /// <param name="taskCatalogName">Gets or sets the task
        /// catalog/category of the task</param>
        public FormTaskCreateRequest(string title, object formLayout = default(object), BaseTaskCreateRequestPriority? priority = default(BaseTaskCreateRequestPriority?), object data = default(object), string taskCatalogName = default(string))
        {
            FormLayout = formLayout;
            Title = title;
            Priority = priority;
            Data = data;
            TaskCatalogName = taskCatalogName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets text representing the form layout schema
        /// </summary>
        [JsonProperty(PropertyName = "formLayout")]
        public object FormLayout { get; set; }

        /// <summary>
        /// Gets or sets title of this task.
        /// </summary>
        [JsonProperty(PropertyName = "title")]
        public string Title { get; set; }

        /// <summary>
        /// Gets or sets priority of this task. Possible values include: 'Low',
        /// 'Medium', 'High', 'Critical'
        /// </summary>
        [JsonProperty(PropertyName = "priority")]
        public BaseTaskCreateRequestPriority? Priority { get; set; }

        /// <summary>
        /// Gets or sets task data
        /// </summary>
        [JsonProperty(PropertyName = "data")]
        public object Data { get; set; }

        /// <summary>
        /// Gets or sets the task catalog/category of the task
        /// </summary>
        [JsonProperty(PropertyName = "taskCatalogName")]
        public string TaskCatalogName { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Title == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Title");
            }
            if (Title != null)
            {
                if (Title.Length > 512)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Title", 512);
                }
                if (Title.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Title", 0);
                }
            }
            if (TaskCatalogName != null)
            {
                if (TaskCatalogName.Length > 50)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "TaskCatalogName", 50);
                }
            }
        }
    }
}
