// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Zell.UiPathAutomation.Orchestrator.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A grouping of Robots.
    /// </summary>
    public partial class EnvironmentDto
    {
        /// <summary>
        /// Initializes a new instance of the EnvironmentDto class.
        /// </summary>
        public EnvironmentDto()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EnvironmentDto class.
        /// </summary>
        /// <param name="name">A custom name for the environment.</param>
        /// <param name="description">Used to add additional information about
        /// an environment in order to better identify it.</param>
        /// <param name="robots">The collection of robots associated with the
        /// current environment.</param>
        /// <param name="type">DEPRECATED. The environment type specifies how
        /// it should be used.
        /// This property is deprecated and should no longer be used. Possible
        /// values include: 'Dev', 'Test', 'Prod'</param>
        public EnvironmentDto(string name, string description = default(string), IList<SimpleRobotDto> robots = default(IList<SimpleRobotDto>), EnvironmentDtoType? type = default(EnvironmentDtoType?), long? id = default(long?))
        {
            Name = name;
            Description = description;
            Robots = robots;
            Type = type;
            Id = id;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets a custom name for the environment.
        /// </summary>
        [JsonProperty(PropertyName = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets used to add additional information about an
        /// environment in order to better identify it.
        /// </summary>
        [JsonProperty(PropertyName = "Description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the collection of robots associated with the current
        /// environment.
        /// </summary>
        [JsonProperty(PropertyName = "Robots")]
        public IList<SimpleRobotDto> Robots { get; set; }

        /// <summary>
        /// Gets or sets DEPRECATED. The environment type specifies how it
        /// should be used.
        /// This property is deprecated and should no longer be used. Possible
        /// values include: 'Dev', 'Test', 'Prod'
        /// </summary>
        [JsonProperty(PropertyName = "Type")]
        [System.Obsolete("This property is deprecated. Please do not use it any longer.")]
        public EnvironmentDtoType? Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Id")]
        public long? Id { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Name != null)
            {
                if (Name.Length > 100)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Name", 100);
                }
                if (Name.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Name", 0);
                }
            }
            if (Description != null)
            {
                if (Description.Length > 500)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Description", 500);
                }
                if (Description.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Description", 0);
                }
            }
            if (Robots != null)
            {
                foreach (var element in Robots)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
