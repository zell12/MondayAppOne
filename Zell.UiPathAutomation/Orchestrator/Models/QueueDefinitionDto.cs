// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Zell.UiPathAutomation.Orchestrator.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The definition of a work queue. A work queue contains work items that
    /// are processed by robots.
    /// </summary>
    public partial class QueueDefinitionDto
    {
        /// <summary>
        /// Initializes a new instance of the QueueDefinitionDto class.
        /// </summary>
        public QueueDefinitionDto()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the QueueDefinitionDto class.
        /// </summary>
        /// <param name="name">A custom name for the queue.</param>
        /// <param name="description">Used to add additional information about
        /// a queue in order to better identify it.</param>
        /// <param name="maxNumberOfRetries">An integer value representing the
        /// number of times an item of this queue can be retried if its
        /// processing fails with application exception and auto retry is
        /// on.</param>
        /// <param name="acceptAutomaticallyRetry">States whether a robot
        /// should retry to process an item if, after processing, it failed
        /// with application exception.</param>
        /// <param name="enforceUniqueReference">States whether Item Reference
        /// field should be unique per Queue. Deleted and retried items are not
        /// checked against this rule.</param>
        /// <param name="specificDataJsonSchema">JSON schema enforced onto the
        /// specific data field.</param>
        /// <param name="outputDataJsonSchema">JSON schema enforced onto the
        /// output data field.</param>
        /// <param name="analyticsDataJsonSchema">JSON schema enforced onto the
        /// analytics data field.</param>
        /// <param name="creationTime">The date and time when the queue was
        /// created.</param>
        /// <param name="processScheduleId">The Id of the process schedule
        /// associated with the queue.</param>
        /// <param name="slaInMinutes">Queue item processing SLA on the
        /// QueueDefinition level.</param>
        /// <param name="riskSlaInMinutes">Queue Item processing Risk SLA on
        /// the QueueDefinition level.</param>
        /// <param name="releaseId">The ProcessId Queue is associated
        /// with.</param>
        /// <param name="organizationUnitId">Id of the folder this queue is
        /// part of.</param>
        /// <param name="organizationUnitFullyQualifiedName">Fully qualified
        /// name of the folder this queue is part of.</param>
        public QueueDefinitionDto(string name, string description = default(string), int? maxNumberOfRetries = default(int?), bool? acceptAutomaticallyRetry = default(bool?), bool? enforceUniqueReference = default(bool?), string specificDataJsonSchema = default(string), string outputDataJsonSchema = default(string), string analyticsDataJsonSchema = default(string), System.DateTime? creationTime = default(System.DateTime?), long? processScheduleId = default(long?), int? slaInMinutes = default(int?), int? riskSlaInMinutes = default(int?), long? releaseId = default(long?), long? organizationUnitId = default(long?), string organizationUnitFullyQualifiedName = default(string), long? id = default(long?))
        {
            Name = name;
            Description = description;
            MaxNumberOfRetries = maxNumberOfRetries;
            AcceptAutomaticallyRetry = acceptAutomaticallyRetry;
            EnforceUniqueReference = enforceUniqueReference;
            SpecificDataJsonSchema = specificDataJsonSchema;
            OutputDataJsonSchema = outputDataJsonSchema;
            AnalyticsDataJsonSchema = analyticsDataJsonSchema;
            CreationTime = creationTime;
            ProcessScheduleId = processScheduleId;
            SlaInMinutes = slaInMinutes;
            RiskSlaInMinutes = riskSlaInMinutes;
            ReleaseId = releaseId;
            OrganizationUnitId = organizationUnitId;
            OrganizationUnitFullyQualifiedName = organizationUnitFullyQualifiedName;
            Id = id;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets a custom name for the queue.
        /// </summary>
        [JsonProperty(PropertyName = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets used to add additional information about a queue in
        /// order to better identify it.
        /// </summary>
        [JsonProperty(PropertyName = "Description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets an integer value representing the number of times an
        /// item of this queue can be retried if its processing fails with
        /// application exception and auto retry is on.
        /// </summary>
        [JsonProperty(PropertyName = "MaxNumberOfRetries")]
        public int? MaxNumberOfRetries { get; set; }

        /// <summary>
        /// Gets or sets states whether a robot should retry to process an item
        /// if, after processing, it failed with application exception.
        /// </summary>
        [JsonProperty(PropertyName = "AcceptAutomaticallyRetry")]
        public bool? AcceptAutomaticallyRetry { get; set; }

        /// <summary>
        /// Gets or sets states whether Item Reference field should be unique
        /// per Queue. Deleted and retried items are not checked against this
        /// rule.
        /// </summary>
        [JsonProperty(PropertyName = "EnforceUniqueReference")]
        public bool? EnforceUniqueReference { get; set; }

        /// <summary>
        /// Gets or sets JSON schema enforced onto the specific data field.
        /// </summary>
        [JsonProperty(PropertyName = "SpecificDataJsonSchema")]
        public string SpecificDataJsonSchema { get; set; }

        /// <summary>
        /// Gets or sets JSON schema enforced onto the output data field.
        /// </summary>
        [JsonProperty(PropertyName = "OutputDataJsonSchema")]
        public string OutputDataJsonSchema { get; set; }

        /// <summary>
        /// Gets or sets JSON schema enforced onto the analytics data field.
        /// </summary>
        [JsonProperty(PropertyName = "AnalyticsDataJsonSchema")]
        public string AnalyticsDataJsonSchema { get; set; }

        /// <summary>
        /// Gets or sets the date and time when the queue was created.
        /// </summary>
        [JsonProperty(PropertyName = "CreationTime")]
        public System.DateTime? CreationTime { get; set; }

        /// <summary>
        /// Gets or sets the Id of the process schedule associated with the
        /// queue.
        /// </summary>
        [JsonProperty(PropertyName = "ProcessScheduleId")]
        public long? ProcessScheduleId { get; set; }

        /// <summary>
        /// Gets or sets queue item processing SLA on the QueueDefinition
        /// level.
        /// </summary>
        [JsonProperty(PropertyName = "SlaInMinutes")]
        public int? SlaInMinutes { get; set; }

        /// <summary>
        /// Gets or sets queue Item processing Risk SLA on the QueueDefinition
        /// level.
        /// </summary>
        [JsonProperty(PropertyName = "RiskSlaInMinutes")]
        public int? RiskSlaInMinutes { get; set; }

        /// <summary>
        /// Gets or sets the ProcessId Queue is associated with.
        /// </summary>
        [JsonProperty(PropertyName = "ReleaseId")]
        public long? ReleaseId { get; set; }

        /// <summary>
        /// Gets or sets id of the folder this queue is part of.
        /// </summary>
        [JsonProperty(PropertyName = "OrganizationUnitId")]
        public long? OrganizationUnitId { get; set; }

        /// <summary>
        /// Gets or sets fully qualified name of the folder this queue is part
        /// of.
        /// </summary>
        [JsonProperty(PropertyName = "OrganizationUnitFullyQualifiedName")]
        public string OrganizationUnitFullyQualifiedName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Id")]
        public long? Id { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (SlaInMinutes != null)
            {
                if (SlaInMinutes > 2147483647)
                {
                    throw new ValidationException(ValidationRules.InclusiveMaximum, "SlaInMinutes", 2147483647);
                }
                if (SlaInMinutes < 0)
                {
                    throw new ValidationException(ValidationRules.InclusiveMinimum, "SlaInMinutes", 0);
                }
            }
            if (RiskSlaInMinutes != null)
            {
                if (RiskSlaInMinutes > 2147483647)
                {
                    throw new ValidationException(ValidationRules.InclusiveMaximum, "RiskSlaInMinutes", 2147483647);
                }
                if (RiskSlaInMinutes < 0)
                {
                    throw new ValidationException(ValidationRules.InclusiveMinimum, "RiskSlaInMinutes", 0);
                }
            }
        }
    }
}
