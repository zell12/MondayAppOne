// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Zell.UiPathAutomation.Orchestrator.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class TestCaseDto
    {
        /// <summary>
        /// Initializes a new instance of the TestCaseDto class.
        /// </summary>
        public TestCaseDto()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TestCaseDto class.
        /// </summary>
        public TestCaseDto(long definitionId, long releaseId, string versionNumber, bool? enabled = default(bool?), TestCaseDefinitionDto definition = default(TestCaseDefinitionDto), long? testSetId = default(long?), TestSetDto testSet = default(TestSetDto), System.DateTime? lastModificationTime = default(System.DateTime?), long? lastModifierUserId = default(long?), System.DateTime? creationTime = default(System.DateTime?), long? creatorUserId = default(long?), long? id = default(long?))
        {
            Enabled = enabled;
            DefinitionId = definitionId;
            Definition = definition;
            ReleaseId = releaseId;
            VersionNumber = versionNumber;
            TestSetId = testSetId;
            TestSet = testSet;
            LastModificationTime = lastModificationTime;
            LastModifierUserId = lastModifierUserId;
            CreationTime = creationTime;
            CreatorUserId = creatorUserId;
            Id = id;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Enabled")]
        public bool? Enabled { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "DefinitionId")]
        public long DefinitionId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Definition")]
        public TestCaseDefinitionDto Definition { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ReleaseId")]
        public long ReleaseId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "VersionNumber")]
        public string VersionNumber { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "TestSetId")]
        public long? TestSetId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "TestSet")]
        public TestSetDto TestSet { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "LastModificationTime")]
        public System.DateTime? LastModificationTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "LastModifierUserId")]
        public long? LastModifierUserId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CreationTime")]
        public System.DateTime? CreationTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CreatorUserId")]
        public long? CreatorUserId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Id")]
        public long? Id { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (VersionNumber == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "VersionNumber");
            }
            if (TestSet != null)
            {
                TestSet.Validate();
            }
        }
    }
}
