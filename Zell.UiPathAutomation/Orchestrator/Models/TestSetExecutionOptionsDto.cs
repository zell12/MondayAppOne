// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Zell.UiPathAutomation.Orchestrator.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class TestSetExecutionOptionsDto
    {
        /// <summary>
        /// Initializes a new instance of the TestSetExecutionOptionsDto class.
        /// </summary>
        public TestSetExecutionOptionsDto()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TestSetExecutionOptionsDto class.
        /// </summary>
        /// <param name="triggerType">Possible values include: 'Manual',
        /// 'Scheduled', 'ExternalTool'</param>
        public TestSetExecutionOptionsDto(System.Guid? batchExecutionKey = default(System.Guid?), TestSetExecutionOptionsDtoTriggerType? triggerType = default(TestSetExecutionOptionsDtoTriggerType?), IList<TestCaseInfoDto> testCases = default(IList<TestCaseInfoDto>), bool? executeOnlySpecifiedTestCases = default(bool?))
        {
            BatchExecutionKey = batchExecutionKey;
            TriggerType = triggerType;
            TestCases = testCases;
            ExecuteOnlySpecifiedTestCases = executeOnlySpecifiedTestCases;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "BatchExecutionKey")]
        public System.Guid? BatchExecutionKey { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Manual', 'Scheduled',
        /// 'ExternalTool'
        /// </summary>
        [JsonProperty(PropertyName = "TriggerType")]
        public TestSetExecutionOptionsDtoTriggerType? TriggerType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "TestCases")]
        public IList<TestCaseInfoDto> TestCases { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ExecuteOnlySpecifiedTestCases")]
        public bool? ExecuteOnlySpecifiedTestCases { get; set; }

    }
}
