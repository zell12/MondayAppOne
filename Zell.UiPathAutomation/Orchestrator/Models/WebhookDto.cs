// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Zell.UiPathAutomation.Orchestrator.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class WebhookDto
    {
        /// <summary>
        /// Initializes a new instance of the WebhookDto class.
        /// </summary>
        public WebhookDto()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the WebhookDto class.
        /// </summary>
        public WebhookDto(string url, bool enabled, bool subscribeToAllEvents, bool allowInsecureSsl, string secret = default(string), IList<WebhookEventDto> events = default(IList<WebhookEventDto>), long? id = default(long?))
        {
            Url = url;
            Enabled = enabled;
            Secret = secret;
            SubscribeToAllEvents = subscribeToAllEvents;
            AllowInsecureSsl = allowInsecureSsl;
            Events = events;
            Id = id;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Url")]
        public string Url { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Enabled")]
        public bool Enabled { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Secret")]
        public string Secret { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "SubscribeToAllEvents")]
        public bool SubscribeToAllEvents { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "AllowInsecureSsl")]
        public bool AllowInsecureSsl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Events")]
        public IList<WebhookEventDto> Events { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Id")]
        public long? Id { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Url == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Url");
            }
            if (Url != null)
            {
                if (Url.Length > 2000)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Url", 2000);
                }
                if (Url.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Url", 0);
                }
            }
            if (Secret != null)
            {
                if (Secret.Length > 100)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Secret", 100);
                }
                if (Secret.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Secret", 0);
                }
            }
            if (Events != null)
            {
                foreach (var element in Events)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
