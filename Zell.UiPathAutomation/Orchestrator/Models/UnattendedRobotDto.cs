// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Zell.UiPathAutomation.Orchestrator.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class UnattendedRobotDto
    {
        /// <summary>
        /// Initializes a new instance of the UnattendedRobotDto class.
        /// </summary>
        public UnattendedRobotDto()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UnattendedRobotDto class.
        /// </summary>
        /// <param name="userName">The UserName used to authenticate on the
        /// Host Machine.</param>
        /// <param name="password">The Password used to authenticate on the
        /// Host Machine.</param>
        /// <param name="credentialStoreId">The Credential Store used to store
        /// the password.</param>
        /// <param name="credentialType">The robot credentials type (Default/
        /// SmartCard). Possible values include: 'Default', 'SmartCard',
        /// 'NCipher', 'SafeNet'</param>
        /// <param name="credentialExternalName">Contains the value of the key
        /// in the external store used to store the password.</param>
        /// <param name="executionSettings">An object containing execution
        /// settings for the Robot.</param>
        /// <param name="limitConcurrentExecution">Specifies if the robot can
        /// be used concurrently on multiple machines</param>
        /// <param name="robotId">The actual Id of the provisioned
        /// Robot.</param>
        public UnattendedRobotDto(string userName, string password = default(string), long? credentialStoreId = default(long?), UnattendedRobotDtoCredentialType? credentialType = default(UnattendedRobotDtoCredentialType?), string credentialExternalName = default(string), IDictionary<string, object> executionSettings = default(IDictionary<string, object>), bool? limitConcurrentExecution = default(bool?), long? robotId = default(long?))
        {
            UserName = userName;
            Password = password;
            CredentialStoreId = credentialStoreId;
            CredentialType = credentialType;
            CredentialExternalName = credentialExternalName;
            ExecutionSettings = executionSettings;
            LimitConcurrentExecution = limitConcurrentExecution;
            RobotId = robotId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the UserName used to authenticate on the Host Machine.
        /// </summary>
        [JsonProperty(PropertyName = "UserName")]
        public string UserName { get; set; }

        /// <summary>
        /// Gets or sets the Password used to authenticate on the Host Machine.
        /// </summary>
        [JsonProperty(PropertyName = "Password")]
        public string Password { get; set; }

        /// <summary>
        /// Gets or sets the Credential Store used to store the password.
        /// </summary>
        [JsonProperty(PropertyName = "CredentialStoreId")]
        public long? CredentialStoreId { get; set; }

        /// <summary>
        /// Gets or sets the robot credentials type (Default/ SmartCard).
        /// Possible values include: 'Default', 'SmartCard', 'NCipher',
        /// 'SafeNet'
        /// </summary>
        [JsonProperty(PropertyName = "CredentialType")]
        public UnattendedRobotDtoCredentialType? CredentialType { get; set; }

        /// <summary>
        /// Gets or sets contains the value of the key in the external store
        /// used to store the password.
        /// </summary>
        [JsonProperty(PropertyName = "CredentialExternalName")]
        public string CredentialExternalName { get; set; }

        /// <summary>
        /// Gets or sets an object containing execution settings for the Robot.
        /// </summary>
        [JsonProperty(PropertyName = "ExecutionSettings")]
        public IDictionary<string, object> ExecutionSettings { get; set; }

        /// <summary>
        /// Gets or sets specifies if the robot can be used concurrently on
        /// multiple machines
        /// </summary>
        [JsonProperty(PropertyName = "LimitConcurrentExecution")]
        public bool? LimitConcurrentExecution { get; set; }

        /// <summary>
        /// Gets or sets the actual Id of the provisioned Robot.
        /// </summary>
        [JsonProperty(PropertyName = "RobotId")]
        public long? RobotId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (UserName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "UserName");
            }
            if (UserName != null)
            {
                if (UserName.Length > 100)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "UserName", 100);
                }
                if (UserName.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "UserName", 0);
                }
            }
            if (Password != null)
            {
                if (Password.Length > 100)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Password", 100);
                }
                if (Password.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Password", 0);
                }
            }
            if (CredentialExternalName != null)
            {
                if (CredentialExternalName.Length > 450)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "CredentialExternalName", 450);
                }
                if (CredentialExternalName.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "CredentialExternalName", 0);
                }
            }
        }
    }
}
