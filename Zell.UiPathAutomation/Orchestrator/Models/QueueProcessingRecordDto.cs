// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Zell.UiPathAutomation.Orchestrator.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Stores aggregated report information about the processing status of all
    /// the items from a given queue in a specific time period.
    /// </summary>
    public partial class QueueProcessingRecordDto
    {
        /// <summary>
        /// Initializes a new instance of the QueueProcessingRecordDto class.
        /// </summary>
        public QueueProcessingRecordDto()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the QueueProcessingRecordDto class.
        /// </summary>
        /// <param name="queueDefinitionId">The Id of the queue for which the
        /// report is done.</param>
        /// <param name="processingTime">The date and time when the report is
        /// computed.</param>
        /// <param name="reportType">The aggregation period used in the report.
        /// Possible values include: 'All', 'Minute', 'Hour', 'Day'</param>
        /// <param name="numberOfRemainingTransactions">The number of
        /// unprocessed (new) items.</param>
        /// <param name="numberOfInProgressTransactions">The number of items in
        /// progress.</param>
        /// <param name="numberOfApplicationExceptions">The total number of
        /// application exceptions thrown while processing queue items in the
        /// given time period.</param>
        /// <param name="numberOfBusinessExceptions">The total number of
        /// business exceptions thrown while processing queue items in the
        /// given time period.</param>
        /// <param name="numberOfSuccessfulTransactions">The total number of
        /// successfully processed queue items in the given time
        /// period.</param>
        /// <param name="numberOfRetriedItems">The total number of processing
        /// retries occurred in the given time period.</param>
        /// <param name="applicationExceptionsProcessingTime">The total number
        /// of seconds spent processing queue items that failed with
        /// application exception in the given time period.</param>
        /// <param name="businessExceptionsProcessingTime">The total number of
        /// seconds spent processing queue items that failed with business
        /// exception in the given time period.</param>
        /// <param name="successfulTransactionsProcessingTime">The total number
        /// of seconds spent processing successful queue items in the given
        /// time period.</param>
        /// <param name="totalNumberOfTransactions">The total number of item
        /// processing transactions, both failed and successful.</param>
        /// <param name="tenantId">The Id of the queue tenant.</param>
        public QueueProcessingRecordDto(long? queueDefinitionId = default(long?), QueueDefinitionDto uiQueueMetadata = default(QueueDefinitionDto), System.DateTime? processingTime = default(System.DateTime?), QueueProcessingRecordDtoReportType? reportType = default(QueueProcessingRecordDtoReportType?), int? numberOfRemainingTransactions = default(int?), int? numberOfInProgressTransactions = default(int?), int? numberOfApplicationExceptions = default(int?), int? numberOfBusinessExceptions = default(int?), int? numberOfSuccessfulTransactions = default(int?), int? numberOfRetriedItems = default(int?), decimal? applicationExceptionsProcessingTime = default(decimal?), decimal? businessExceptionsProcessingTime = default(decimal?), decimal? successfulTransactionsProcessingTime = default(decimal?), int? totalNumberOfTransactions = default(int?), int? tenantId = default(int?), long? id = default(long?))
        {
            QueueDefinitionId = queueDefinitionId;
            UiQueueMetadata = uiQueueMetadata;
            ProcessingTime = processingTime;
            ReportType = reportType;
            NumberOfRemainingTransactions = numberOfRemainingTransactions;
            NumberOfInProgressTransactions = numberOfInProgressTransactions;
            NumberOfApplicationExceptions = numberOfApplicationExceptions;
            NumberOfBusinessExceptions = numberOfBusinessExceptions;
            NumberOfSuccessfulTransactions = numberOfSuccessfulTransactions;
            NumberOfRetriedItems = numberOfRetriedItems;
            ApplicationExceptionsProcessingTime = applicationExceptionsProcessingTime;
            BusinessExceptionsProcessingTime = businessExceptionsProcessingTime;
            SuccessfulTransactionsProcessingTime = successfulTransactionsProcessingTime;
            TotalNumberOfTransactions = totalNumberOfTransactions;
            TenantId = tenantId;
            Id = id;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the Id of the queue for which the report is done.
        /// </summary>
        [JsonProperty(PropertyName = "QueueDefinitionId")]
        public long? QueueDefinitionId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "UiQueueMetadata")]
        public QueueDefinitionDto UiQueueMetadata { get; set; }

        /// <summary>
        /// Gets or sets the date and time when the report is computed.
        /// </summary>
        [JsonProperty(PropertyName = "ProcessingTime")]
        public System.DateTime? ProcessingTime { get; set; }

        /// <summary>
        /// Gets or sets the aggregation period used in the report. Possible
        /// values include: 'All', 'Minute', 'Hour', 'Day'
        /// </summary>
        [JsonProperty(PropertyName = "ReportType")]
        public QueueProcessingRecordDtoReportType? ReportType { get; set; }

        /// <summary>
        /// Gets or sets the number of unprocessed (new) items.
        /// </summary>
        [JsonProperty(PropertyName = "NumberOfRemainingTransactions")]
        public int? NumberOfRemainingTransactions { get; set; }

        /// <summary>
        /// Gets or sets the number of items in progress.
        /// </summary>
        [JsonProperty(PropertyName = "NumberOfInProgressTransactions")]
        public int? NumberOfInProgressTransactions { get; set; }

        /// <summary>
        /// Gets or sets the total number of application exceptions thrown
        /// while processing queue items in the given time period.
        /// </summary>
        [JsonProperty(PropertyName = "NumberOfApplicationExceptions")]
        public int? NumberOfApplicationExceptions { get; set; }

        /// <summary>
        /// Gets or sets the total number of business exceptions thrown while
        /// processing queue items in the given time period.
        /// </summary>
        [JsonProperty(PropertyName = "NumberOfBusinessExceptions")]
        public int? NumberOfBusinessExceptions { get; set; }

        /// <summary>
        /// Gets or sets the total number of successfully processed queue items
        /// in the given time period.
        /// </summary>
        [JsonProperty(PropertyName = "NumberOfSuccessfulTransactions")]
        public int? NumberOfSuccessfulTransactions { get; set; }

        /// <summary>
        /// Gets or sets the total number of processing retries occurred in the
        /// given time period.
        /// </summary>
        [JsonProperty(PropertyName = "NumberOfRetriedItems")]
        public int? NumberOfRetriedItems { get; set; }

        /// <summary>
        /// Gets or sets the total number of seconds spent processing queue
        /// items that failed with application exception in the given time
        /// period.
        /// </summary>
        [JsonProperty(PropertyName = "ApplicationExceptionsProcessingTime")]
        public decimal? ApplicationExceptionsProcessingTime { get; set; }

        /// <summary>
        /// Gets or sets the total number of seconds spent processing queue
        /// items that failed with business exception in the given time period.
        /// </summary>
        [JsonProperty(PropertyName = "BusinessExceptionsProcessingTime")]
        public decimal? BusinessExceptionsProcessingTime { get; set; }

        /// <summary>
        /// Gets or sets the total number of seconds spent processing
        /// successful queue items in the given time period.
        /// </summary>
        [JsonProperty(PropertyName = "SuccessfulTransactionsProcessingTime")]
        public decimal? SuccessfulTransactionsProcessingTime { get; set; }

        /// <summary>
        /// Gets or sets the total number of item processing transactions, both
        /// failed and successful.
        /// </summary>
        [JsonProperty(PropertyName = "TotalNumberOfTransactions")]
        public int? TotalNumberOfTransactions { get; set; }

        /// <summary>
        /// Gets or sets the Id of the queue tenant.
        /// </summary>
        [JsonProperty(PropertyName = "TenantId")]
        public int? TenantId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Id")]
        public long? Id { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (UiQueueMetadata != null)
            {
                UiQueueMetadata.Validate();
            }
        }
    }
}
