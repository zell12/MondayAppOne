// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Zell.UiPathAutomation.Orchestrator.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Stores information about an organization unit in Orchestrator.
    /// &lt;para /&gt; An orchestrator unit can be understood as a company
    /// department and it is used to group different entities.
    /// </summary>
    public partial class UserOrganizationUnitDto
    {
        /// <summary>
        /// Initializes a new instance of the UserOrganizationUnitDto class.
        /// </summary>
        public UserOrganizationUnitDto()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UserOrganizationUnitDto class.
        /// </summary>
        /// <param name="userId">The Id of the user</param>
        /// <param name="userName">The name of the user</param>
        /// <param name="organizationUnitId">The Id of the organization
        /// unit</param>
        /// <param name="organizationUnitName">The name of the organization
        /// unit.</param>
        public UserOrganizationUnitDto(long? userId = default(long?), string userName = default(string), long? organizationUnitId = default(long?), string organizationUnitName = default(string), long? id = default(long?))
        {
            UserId = userId;
            UserName = userName;
            OrganizationUnitId = organizationUnitId;
            OrganizationUnitName = organizationUnitName;
            Id = id;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the Id of the user
        /// </summary>
        [JsonProperty(PropertyName = "userId")]
        public long? UserId { get; set; }

        /// <summary>
        /// Gets or sets the name of the user
        /// </summary>
        [JsonProperty(PropertyName = "userName")]
        public string UserName { get; set; }

        /// <summary>
        /// Gets or sets the Id of the organization unit
        /// </summary>
        [JsonProperty(PropertyName = "organizationUnitId")]
        public long? OrganizationUnitId { get; set; }

        /// <summary>
        /// Gets or sets the name of the organization unit.
        /// </summary>
        [JsonProperty(PropertyName = "organizationUnitName")]
        public string OrganizationUnitName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public long? Id { get; set; }

    }
}
