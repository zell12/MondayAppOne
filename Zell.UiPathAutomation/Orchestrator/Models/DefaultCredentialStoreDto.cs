// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Zell.UiPathAutomation.Orchestrator.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class DefaultCredentialStoreDto
    {
        /// <summary>
        /// Initializes a new instance of the DefaultCredentialStoreDto class.
        /// </summary>
        public DefaultCredentialStoreDto()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DefaultCredentialStoreDto class.
        /// </summary>
        /// <param name="resourceType">This enum describes the type of
        /// resources that can be stored in the Credential Store. When
        /// a new resource type is added, the default needs to be initialized
        /// in 3 places:
        /// 1. Existing tenants: At migration time.
        /// 2. Default tenant: At seed time in DefaultTenantCreator.cs.
        /// 3. New tenants: In TenantService.cs. Possible values include:
        /// 'AssetCredential', 'RobotCredential', 'BucketCredential',
        /// 'Secrets'</param>
        public DefaultCredentialStoreDto(DefaultCredentialStoreDtoResourceType resourceType, long? id = default(long?))
        {
            ResourceType = resourceType;
            Id = id;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets this enum describes the type of resources that can be
        /// stored in the Credential Store. When
        /// a new resource type is added, the default needs to be initialized
        /// in 3 places:
        /// 1. Existing tenants: At migration time.
        /// 2. Default tenant: At seed time in DefaultTenantCreator.cs.
        /// 3. New tenants: In TenantService.cs. Possible values include:
        /// 'AssetCredential', 'RobotCredential', 'BucketCredential', 'Secrets'
        /// </summary>
        [JsonProperty(PropertyName = "ResourceType")]
        public DefaultCredentialStoreDtoResourceType ResourceType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Id")]
        public long? Id { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
        }
    }
}
