// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Zell.UiPathAutomation.Orchestrator.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Stores information about an event on a queue item.
    /// </summary>
    public partial class QueueItemEventDto
    {
        /// <summary>
        /// Initializes a new instance of the QueueItemEventDto class.
        /// </summary>
        public QueueItemEventDto()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the QueueItemEventDto class.
        /// </summary>
        /// <param name="queueItemId">The Id of a Queue Item that the current
        /// item is connected to.</param>
        /// <param name="timestamp">The Date and Time when the event
        /// occured.</param>
        /// <param name="action">The Action that caused the event. Possible
        /// values include: 'Create', 'Edit', 'Delete', 'Status',
        /// 'Retry'</param>
        /// <param name="data">The Data associated to the event.</param>
        /// <param name="userId">The Id of the User that caused the
        /// event.</param>
        /// <param name="userName">The Name of the User that caused the
        /// event.</param>
        /// <param name="status">Processing Status when event snapshot was
        /// taken. Possible values include: 'New', 'InProgress', 'Failed',
        /// 'Successful', 'Abandoned', 'Retried', 'Deleted'</param>
        /// <param name="reviewStatus">Review Status when event snapshot was
        /// taken. Possible values include: 'None', 'InReview', 'Verified',
        /// 'Retried'</param>
        /// <param name="reviewerUserId">Reviewer User Id when event snapshot
        /// was taken.</param>
        /// <param name="reviewerUserName">Reviewer User Name when event
        /// snapshot was taken.</param>
        public QueueItemEventDto(long? queueItemId = default(long?), System.DateTime? timestamp = default(System.DateTime?), QueueItemEventDtoAction? action = default(QueueItemEventDtoAction?), string data = default(string), long? userId = default(long?), string userName = default(string), QueueItemEventDtoStatus? status = default(QueueItemEventDtoStatus?), QueueItemEventDtoReviewStatus? reviewStatus = default(QueueItemEventDtoReviewStatus?), long? reviewerUserId = default(long?), string reviewerUserName = default(string), long? id = default(long?))
        {
            QueueItemId = queueItemId;
            Timestamp = timestamp;
            Action = action;
            Data = data;
            UserId = userId;
            UserName = userName;
            Status = status;
            ReviewStatus = reviewStatus;
            ReviewerUserId = reviewerUserId;
            ReviewerUserName = reviewerUserName;
            Id = id;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the Id of a Queue Item that the current item is
        /// connected to.
        /// </summary>
        [JsonProperty(PropertyName = "QueueItemId")]
        public long? QueueItemId { get; set; }

        /// <summary>
        /// Gets or sets the Date and Time when the event occured.
        /// </summary>
        [JsonProperty(PropertyName = "Timestamp")]
        public System.DateTime? Timestamp { get; set; }

        /// <summary>
        /// Gets or sets the Action that caused the event. Possible values
        /// include: 'Create', 'Edit', 'Delete', 'Status', 'Retry'
        /// </summary>
        [JsonProperty(PropertyName = "Action")]
        public QueueItemEventDtoAction? Action { get; set; }

        /// <summary>
        /// Gets or sets the Data associated to the event.
        /// </summary>
        [JsonProperty(PropertyName = "Data")]
        public string Data { get; set; }

        /// <summary>
        /// Gets or sets the Id of the User that caused the event.
        /// </summary>
        [JsonProperty(PropertyName = "UserId")]
        public long? UserId { get; set; }

        /// <summary>
        /// Gets or sets the Name of the User that caused the event.
        /// </summary>
        [JsonProperty(PropertyName = "UserName")]
        public string UserName { get; set; }

        /// <summary>
        /// Gets or sets processing Status when event snapshot was taken.
        /// Possible values include: 'New', 'InProgress', 'Failed',
        /// 'Successful', 'Abandoned', 'Retried', 'Deleted'
        /// </summary>
        [JsonProperty(PropertyName = "Status")]
        public QueueItemEventDtoStatus? Status { get; set; }

        /// <summary>
        /// Gets or sets review Status when event snapshot was taken. Possible
        /// values include: 'None', 'InReview', 'Verified', 'Retried'
        /// </summary>
        [JsonProperty(PropertyName = "ReviewStatus")]
        public QueueItemEventDtoReviewStatus? ReviewStatus { get; set; }

        /// <summary>
        /// Gets or sets reviewer User Id when event snapshot was taken.
        /// </summary>
        [JsonProperty(PropertyName = "ReviewerUserId")]
        public long? ReviewerUserId { get; set; }

        /// <summary>
        /// Gets or sets reviewer User Name when event snapshot was taken.
        /// </summary>
        [JsonProperty(PropertyName = "ReviewerUserName")]
        public string ReviewerUserName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Id")]
        public long? Id { get; set; }

    }
}
