// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Zell.UiPathAutomation.Orchestrator.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class SmtpSettingModel
    {
        /// <summary>
        /// Initializes a new instance of the SmtpSettingModel class.
        /// </summary>
        public SmtpSettingModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SmtpSettingModel class.
        /// </summary>
        public SmtpSettingModel(string host, int port, string userName = default(string), string password = default(string), string domain = default(string), bool? enableSsl = default(bool?), bool? useDefaultCredentials = default(bool?), string defaultFromAddress = default(string), string defaultFromDisplayName = default(string))
        {
            Host = host;
            Port = port;
            UserName = userName;
            Password = password;
            Domain = domain;
            EnableSsl = enableSsl;
            UseDefaultCredentials = useDefaultCredentials;
            DefaultFromAddress = defaultFromAddress;
            DefaultFromDisplayName = defaultFromDisplayName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Host")]
        public string Host { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Port")]
        public int Port { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "UserName")]
        public string UserName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Password")]
        public string Password { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Domain")]
        public string Domain { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EnableSsl")]
        public bool? EnableSsl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "UseDefaultCredentials")]
        public bool? UseDefaultCredentials { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "DefaultFromAddress")]
        public string DefaultFromAddress { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "DefaultFromDisplayName")]
        public string DefaultFromDisplayName { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Host == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Host");
            }
        }
    }
}
