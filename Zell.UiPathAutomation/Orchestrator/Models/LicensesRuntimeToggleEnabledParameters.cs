// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Zell.UiPathAutomation.Orchestrator.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class LicensesRuntimeToggleEnabledParameters
    {
        /// <summary>
        /// Initializes a new instance of the
        /// LicensesRuntimeToggleEnabledParameters class.
        /// </summary>
        public LicensesRuntimeToggleEnabledParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// LicensesRuntimeToggleEnabledParameters class.
        /// </summary>
        /// <param name="robotType">Possible values include: 'NonProduction',
        /// 'Attended', 'Unattended', 'Studio', 'Development', 'StudioX',
        /// 'Headless', 'StudioPro', 'TestAutomation'</param>
        public LicensesRuntimeToggleEnabledParameters(ToggleEnabledParametersRobotType robotType, bool enabled, string key = default(string))
        {
            Key = key;
            RobotType = robotType;
            Enabled = enabled;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "key")]
        public string Key { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'NonProduction', 'Attended',
        /// 'Unattended', 'Studio', 'Development', 'StudioX', 'Headless',
        /// 'StudioPro', 'TestAutomation'
        /// </summary>
        [JsonProperty(PropertyName = "robotType")]
        public ToggleEnabledParametersRobotType RobotType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "enabled")]
        public bool Enabled { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
        }
    }
}
