// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Zell.UiPathAutomation.Orchestrator.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Stores aggregated report information about the processing status of all
    /// the items from a given queue.
    /// </summary>
    public partial class QueueProcessingStatusDto
    {
        /// <summary>
        /// Initializes a new instance of the QueueProcessingStatusDto class.
        /// </summary>
        public QueueProcessingStatusDto()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the QueueProcessingStatusDto class.
        /// </summary>
        /// <param name="itemsToProcess">The total number of items in the queue
        /// with the status New.</param>
        /// <param name="itemsInProgress">The total number of items in the
        /// queue with the status InProgress.</param>
        /// <param name="queueDefinitionId">The Id of the queue for which the
        /// report is done.</param>
        /// <param name="queueDefinitionName">The name of the queue for which
        /// the report is done.</param>
        /// <param name="queueDefinitionDescription">The description of the
        /// queue for which the report is done.</param>
        /// <param name="queueDefinitionAcceptAutomaticallyRetry">States
        /// whether the queue accepts automatic item retry or not.</param>
        /// <param name="queueDefinitionMaxNumberOfRetries">The maximum number
        /// of retries allowed for any item of the queue.</param>
        /// <param name="queueDefinitionEnforceUniqueReference">States whether
        /// Item Reference field should be unique per Queue. Deleted and
        /// retried items are not checked against this rule.</param>
        /// <param name="processingMeanTime">The average time spent processing
        /// a successful item.</param>
        /// <param name="successfulTransactionsNo">The total number of
        /// successfully processed items.</param>
        /// <param name="applicationExceptionsNo">The total number of
        /// application exceptions thrown while processing queue items.</param>
        /// <param name="businessExceptionsNo">The total number of business
        /// exceptions thrown while processing queue items.</param>
        /// <param name="successfulTransactionsProcessingTime">The total number
        /// of seconds spent processing successful queue items.</param>
        /// <param name="applicationExceptionsProcessingTime">The total number
        /// of seconds spent processing queue items that failed with
        /// application exception.</param>
        /// <param name="businessExceptionsProcessingTime">The total number of
        /// seconds spent processing queue items that failed with business
        /// exception.</param>
        /// <param name="totalNumberOfTransactions">The total number of item
        /// processing transactions, both failed and successful.</param>
        /// <param name="lastProcessed">The date and time of the last item
        /// processing.</param>
        /// <param name="releaseName">The name of the process associated with
        /// the queue.</param>
        /// <param name="specificDataJsonSchemaExists">Optional JSON schema
        /// enforced onto the specific data field is set.</param>
        /// <param name="outputDataJsonSchemaExists">Optional JSON schema
        /// enforced onto the output data field is set.</param>
        /// <param name="analyticsDataJsonSchemaExists">Optional JSON schema
        /// enforced onto the analytics data field is set.</param>
        /// <param name="processScheduleId">The Id of the process schedule
        /// associated with the queue.</param>
        public QueueProcessingStatusDto(int? itemsToProcess = default(int?), int? itemsInProgress = default(int?), long? queueDefinitionId = default(long?), string queueDefinitionName = default(string), string queueDefinitionDescription = default(string), bool? queueDefinitionAcceptAutomaticallyRetry = default(bool?), int? queueDefinitionMaxNumberOfRetries = default(int?), bool? queueDefinitionEnforceUniqueReference = default(bool?), decimal? processingMeanTime = default(decimal?), int? successfulTransactionsNo = default(int?), int? applicationExceptionsNo = default(int?), int? businessExceptionsNo = default(int?), decimal? successfulTransactionsProcessingTime = default(decimal?), decimal? applicationExceptionsProcessingTime = default(decimal?), decimal? businessExceptionsProcessingTime = default(decimal?), int? totalNumberOfTransactions = default(int?), System.DateTime? lastProcessed = default(System.DateTime?), string releaseName = default(string), bool? specificDataJsonSchemaExists = default(bool?), bool? outputDataJsonSchemaExists = default(bool?), bool? analyticsDataJsonSchemaExists = default(bool?), long? processScheduleId = default(long?), long? id = default(long?))
        {
            ItemsToProcess = itemsToProcess;
            ItemsInProgress = itemsInProgress;
            QueueDefinitionId = queueDefinitionId;
            QueueDefinitionName = queueDefinitionName;
            QueueDefinitionDescription = queueDefinitionDescription;
            QueueDefinitionAcceptAutomaticallyRetry = queueDefinitionAcceptAutomaticallyRetry;
            QueueDefinitionMaxNumberOfRetries = queueDefinitionMaxNumberOfRetries;
            QueueDefinitionEnforceUniqueReference = queueDefinitionEnforceUniqueReference;
            ProcessingMeanTime = processingMeanTime;
            SuccessfulTransactionsNo = successfulTransactionsNo;
            ApplicationExceptionsNo = applicationExceptionsNo;
            BusinessExceptionsNo = businessExceptionsNo;
            SuccessfulTransactionsProcessingTime = successfulTransactionsProcessingTime;
            ApplicationExceptionsProcessingTime = applicationExceptionsProcessingTime;
            BusinessExceptionsProcessingTime = businessExceptionsProcessingTime;
            TotalNumberOfTransactions = totalNumberOfTransactions;
            LastProcessed = lastProcessed;
            ReleaseName = releaseName;
            SpecificDataJsonSchemaExists = specificDataJsonSchemaExists;
            OutputDataJsonSchemaExists = outputDataJsonSchemaExists;
            AnalyticsDataJsonSchemaExists = analyticsDataJsonSchemaExists;
            ProcessScheduleId = processScheduleId;
            Id = id;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the total number of items in the queue with the status
        /// New.
        /// </summary>
        [JsonProperty(PropertyName = "ItemsToProcess")]
        public int? ItemsToProcess { get; set; }

        /// <summary>
        /// Gets or sets the total number of items in the queue with the status
        /// InProgress.
        /// </summary>
        [JsonProperty(PropertyName = "ItemsInProgress")]
        public int? ItemsInProgress { get; set; }

        /// <summary>
        /// Gets or sets the Id of the queue for which the report is done.
        /// </summary>
        [JsonProperty(PropertyName = "QueueDefinitionId")]
        public long? QueueDefinitionId { get; set; }

        /// <summary>
        /// Gets or sets the name of the queue for which the report is done.
        /// </summary>
        [JsonProperty(PropertyName = "QueueDefinitionName")]
        public string QueueDefinitionName { get; set; }

        /// <summary>
        /// Gets or sets the description of the queue for which the report is
        /// done.
        /// </summary>
        [JsonProperty(PropertyName = "QueueDefinitionDescription")]
        public string QueueDefinitionDescription { get; set; }

        /// <summary>
        /// Gets or sets states whether the queue accepts automatic item retry
        /// or not.
        /// </summary>
        [JsonProperty(PropertyName = "QueueDefinitionAcceptAutomaticallyRetry")]
        public bool? QueueDefinitionAcceptAutomaticallyRetry { get; set; }

        /// <summary>
        /// Gets or sets the maximum number of retries allowed for any item of
        /// the queue.
        /// </summary>
        [JsonProperty(PropertyName = "QueueDefinitionMaxNumberOfRetries")]
        public int? QueueDefinitionMaxNumberOfRetries { get; set; }

        /// <summary>
        /// Gets or sets states whether Item Reference field should be unique
        /// per Queue. Deleted and retried items are not checked against this
        /// rule.
        /// </summary>
        [JsonProperty(PropertyName = "QueueDefinitionEnforceUniqueReference")]
        public bool? QueueDefinitionEnforceUniqueReference { get; set; }

        /// <summary>
        /// Gets or sets the average time spent processing a successful item.
        /// </summary>
        [JsonProperty(PropertyName = "ProcessingMeanTime")]
        public decimal? ProcessingMeanTime { get; set; }

        /// <summary>
        /// Gets or sets the total number of successfully processed items.
        /// </summary>
        [JsonProperty(PropertyName = "SuccessfulTransactionsNo")]
        public int? SuccessfulTransactionsNo { get; set; }

        /// <summary>
        /// Gets or sets the total number of application exceptions thrown
        /// while processing queue items.
        /// </summary>
        [JsonProperty(PropertyName = "ApplicationExceptionsNo")]
        public int? ApplicationExceptionsNo { get; set; }

        /// <summary>
        /// Gets or sets the total number of business exceptions thrown while
        /// processing queue items.
        /// </summary>
        [JsonProperty(PropertyName = "BusinessExceptionsNo")]
        public int? BusinessExceptionsNo { get; set; }

        /// <summary>
        /// Gets or sets the total number of seconds spent processing
        /// successful queue items.
        /// </summary>
        [JsonProperty(PropertyName = "SuccessfulTransactionsProcessingTime")]
        public decimal? SuccessfulTransactionsProcessingTime { get; set; }

        /// <summary>
        /// Gets or sets the total number of seconds spent processing queue
        /// items that failed with application exception.
        /// </summary>
        [JsonProperty(PropertyName = "ApplicationExceptionsProcessingTime")]
        public decimal? ApplicationExceptionsProcessingTime { get; set; }

        /// <summary>
        /// Gets or sets the total number of seconds spent processing queue
        /// items that failed with business exception.
        /// </summary>
        [JsonProperty(PropertyName = "BusinessExceptionsProcessingTime")]
        public decimal? BusinessExceptionsProcessingTime { get; set; }

        /// <summary>
        /// Gets or sets the total number of item processing transactions, both
        /// failed and successful.
        /// </summary>
        [JsonProperty(PropertyName = "TotalNumberOfTransactions")]
        public int? TotalNumberOfTransactions { get; set; }

        /// <summary>
        /// Gets or sets the date and time of the last item processing.
        /// </summary>
        [JsonProperty(PropertyName = "LastProcessed")]
        public System.DateTime? LastProcessed { get; set; }

        /// <summary>
        /// Gets or sets the name of the process associated with the queue.
        /// </summary>
        [JsonProperty(PropertyName = "ReleaseName")]
        public string ReleaseName { get; set; }

        /// <summary>
        /// Gets or sets optional JSON schema enforced onto the specific data
        /// field is set.
        /// </summary>
        [JsonProperty(PropertyName = "SpecificDataJsonSchemaExists")]
        public bool? SpecificDataJsonSchemaExists { get; set; }

        /// <summary>
        /// Gets or sets optional JSON schema enforced onto the output data
        /// field is set.
        /// </summary>
        [JsonProperty(PropertyName = "OutputDataJsonSchemaExists")]
        public bool? OutputDataJsonSchemaExists { get; set; }

        /// <summary>
        /// Gets or sets optional JSON schema enforced onto the analytics data
        /// field is set.
        /// </summary>
        [JsonProperty(PropertyName = "AnalyticsDataJsonSchemaExists")]
        public bool? AnalyticsDataJsonSchemaExists { get; set; }

        /// <summary>
        /// Gets or sets the Id of the process schedule associated with the
        /// queue.
        /// </summary>
        [JsonProperty(PropertyName = "ProcessScheduleId")]
        public long? ProcessScheduleId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Id")]
        public long? Id { get; set; }

    }
}
