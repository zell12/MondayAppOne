// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Zell.UiPathAutomation.Orchestrator.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class DomainUserAssignmentDto
    {
        /// <summary>
        /// Initializes a new instance of the DomainUserAssignmentDto class.
        /// </summary>
        public DomainUserAssignmentDto()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DomainUserAssignmentDto class.
        /// </summary>
        /// <param name="userType">Possible values include: 'User', 'Robot',
        /// 'DirectoryUser', 'DirectoryGroup'</param>
        public DomainUserAssignmentDto(string domain = default(string), string userName = default(string), DomainUserAssignmentDtoUserType? userType = default(DomainUserAssignmentDtoUserType?), IList<FolderRolesDto> rolesPerFolder = default(IList<FolderRolesDto>))
        {
            Domain = domain;
            UserName = userName;
            UserType = userType;
            RolesPerFolder = rolesPerFolder;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Domain")]
        public string Domain { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "UserName")]
        public string UserName { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'User', 'Robot',
        /// 'DirectoryUser', 'DirectoryGroup'
        /// </summary>
        [JsonProperty(PropertyName = "UserType")]
        public DomainUserAssignmentDtoUserType? UserType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "RolesPerFolder")]
        public IList<FolderRolesDto> RolesPerFolder { get; set; }

    }
}
