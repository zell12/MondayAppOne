// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Zell.UiPathAutomation.Orchestrator.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class LightRoleDto
    {
        /// <summary>
        /// Initializes a new instance of the LightRoleDto class.
        /// </summary>
        public LightRoleDto()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LightRoleDto class.
        /// </summary>
        /// <param name="name">A custom name for the role.</param>
        /// <param name="displayName">An alternative name used for UI
        /// display.</param>
        /// <param name="groups">Allows grouping multiple roles
        /// together.</param>
        /// <param name="isStatic">States whether this role is defined by the
        /// application and cannot be deleted or it is user defined and can be
        /// deleted.</param>
        /// <param name="isEditable">States whether the permissions for this
        /// role can be modified or not.</param>
        public LightRoleDto(string name = default(string), string displayName = default(string), string groups = default(string), bool? isStatic = default(bool?), bool? isEditable = default(bool?), int? id = default(int?))
        {
            Name = name;
            DisplayName = displayName;
            Groups = groups;
            IsStatic = isStatic;
            IsEditable = isEditable;
            Id = id;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets a custom name for the role.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets an alternative name used for UI display.
        /// </summary>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets allows grouping multiple roles together.
        /// </summary>
        [JsonProperty(PropertyName = "groups")]
        public string Groups { get; set; }

        /// <summary>
        /// Gets or sets states whether this role is defined by the application
        /// and cannot be deleted or it is user defined and can be deleted.
        /// </summary>
        [JsonProperty(PropertyName = "isStatic")]
        public bool? IsStatic { get; set; }

        /// <summary>
        /// Gets or sets states whether the permissions for this role can be
        /// modified or not.
        /// </summary>
        [JsonProperty(PropertyName = "isEditable")]
        public bool? IsEditable { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public int? Id { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name != null)
            {
                if (Name.Length > 32)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Name", 32);
                }
            }
            if (DisplayName != null)
            {
                if (DisplayName.Length > 64)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "DisplayName", 64);
                }
            }
        }
    }
}
