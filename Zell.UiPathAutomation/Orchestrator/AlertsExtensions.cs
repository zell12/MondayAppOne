// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Zell.UiPathAutomation.Orchestrator
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Alerts.
    /// </summary>
    public static partial class AlertsExtensions
    {
            /// <summary>
            /// Gets alerts.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Monitoring or
            /// Monitoring.Read.
            ///
            /// Required permissions: Alerts.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='filter'>
            /// Restricts the set of items returned. The maximum number of expressions is
            /// 100.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            /// <param name='orderby'>
            /// Specifies the order in which items are returned. The maximum number of
            /// expressions is 5.
            /// </param>
            /// <param name='top'>
            /// Limits the number of items returned from a collection. The maximum value is
            /// 1000.
            /// </param>
            /// <param name='skip'>
            /// Excludes the specified number of items of the queried collection from the
            /// result.
            /// </param>
            /// <param name='count'>
            /// Indicates whether the total count of items within a collection are returned
            /// in the result.
            /// </param>
            public static ODataValueOfIEnumerableOfAlertDto Get(this IAlerts operations, string expand = default(string), string filter = default(string), string select = default(string), string orderby = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?))
            {
                return operations.GetAsync(expand, filter, select, orderby, top, skip, count).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets alerts.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Monitoring or
            /// Monitoring.Read.
            ///
            /// Required permissions: Alerts.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='filter'>
            /// Restricts the set of items returned. The maximum number of expressions is
            /// 100.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            /// <param name='orderby'>
            /// Specifies the order in which items are returned. The maximum number of
            /// expressions is 5.
            /// </param>
            /// <param name='top'>
            /// Limits the number of items returned from a collection. The maximum value is
            /// 1000.
            /// </param>
            /// <param name='skip'>
            /// Excludes the specified number of items of the queried collection from the
            /// result.
            /// </param>
            /// <param name='count'>
            /// Indicates whether the total count of items within a collection are returned
            /// in the result.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataValueOfIEnumerableOfAlertDto> GetAsync(this IAlerts operations, string expand = default(string), string filter = default(string), string select = default(string), string orderby = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(expand, filter, select, orderby, top, skip, count, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the total number of alerts, per tenant, that haven't been read by
            /// the current user.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Monitoring or
            /// Monitoring.Read.
            ///
            /// Required permissions: Alerts.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            public static ODataValueOfInt64 GetUnreadCount(this IAlerts operations, string expand = default(string), string select = default(string))
            {
                return operations.GetUnreadCountAsync(expand, select).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the total number of alerts, per tenant, that haven't been read by
            /// the current user.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Monitoring or
            /// Monitoring.Read.
            ///
            /// Required permissions: Alerts.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataValueOfInt64> GetUnreadCountAsync(this IAlerts operations, string expand = default(string), string select = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUnreadCountWithHttpMessagesAsync(expand, select, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Marks alerts as read and returns the remaining number of unread
            /// notifications.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Monitoring or
            /// Monitoring.Write.
            ///
            /// Required permissions: Alerts.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Collection containing the unique identifiers of the notifications that will
            /// be marked as read
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            public static ODataValueOfInt64 MarkAsRead(this IAlerts operations, AlertsMarkAsReadParameters body = default(AlertsMarkAsReadParameters), string expand = default(string), string select = default(string))
            {
                return operations.MarkAsReadAsync(body, expand, select).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Marks alerts as read and returns the remaining number of unread
            /// notifications.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Monitoring or
            /// Monitoring.Write.
            ///
            /// Required permissions: Alerts.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Collection containing the unique identifiers of the notifications that will
            /// be marked as read
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataValueOfInt64> MarkAsReadAsync(this IAlerts operations, AlertsMarkAsReadParameters body = default(AlertsMarkAsReadParameters), string expand = default(string), string select = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.MarkAsReadWithHttpMessagesAsync(body, expand, select, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a Process Alert
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Monitoring or
            /// Monitoring.Write.
            ///
            /// Required permissions: Alerts.Create.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void RaiseProcessAlert(this IAlerts operations, AlertsRaiseProcessAlertParameters body = default(AlertsRaiseProcessAlertParameters))
            {
                operations.RaiseProcessAlertAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a Process Alert
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Monitoring or
            /// Monitoring.Write.
            ///
            /// Required permissions: Alerts.Create.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RaiseProcessAlertAsync(this IAlerts operations, AlertsRaiseProcessAlertParameters body = default(AlertsRaiseProcessAlertParameters), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RaiseProcessAlertWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
