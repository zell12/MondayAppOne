// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Zell.UiPathAutomation.Orchestrator
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Buckets.
    /// </summary>
    public static partial class BucketsExtensions
    {
            /// <summary>
            /// Creates an Bucket
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Administration or
            /// Administration.Write.
            ///
            /// Required permissions: Buckets.Create.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            public static BucketDto Post(this IBuckets operations, BucketDto body = default(BucketDto), long? xUIPATHOrganizationUnitId = default(long?))
            {
                return operations.PostAsync(body, xUIPATHOrganizationUnitId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates an Bucket
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Administration or
            /// Administration.Write.
            ///
            /// Required permissions: Buckets.Create.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BucketDto> PostAsync(this IBuckets operations, BucketDto body = default(BucketDto), long? xUIPATHOrganizationUnitId = default(long?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostWithHttpMessagesAsync(body, xUIPATHOrganizationUnitId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets Buckets.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Administration or
            /// Administration.Read.
            ///
            /// Required permissions: Buckets.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='filter'>
            /// Restricts the set of items returned. The maximum number of expressions is
            /// 100.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            /// <param name='orderby'>
            /// Specifies the order in which items are returned. The maximum number of
            /// expressions is 5.
            /// </param>
            /// <param name='top'>
            /// Limits the number of items returned from a collection. The maximum value is
            /// 1000.
            /// </param>
            /// <param name='skip'>
            /// Excludes the specified number of items of the queried collection from the
            /// result.
            /// </param>
            /// <param name='count'>
            /// Indicates whether the total count of items within a collection are returned
            /// in the result.
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            public static ODataValueOfIEnumerableOfBucketDto Get(this IBuckets operations, string expand = default(string), string filter = default(string), string select = default(string), string orderby = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), long? xUIPATHOrganizationUnitId = default(long?))
            {
                return operations.GetAsync(expand, filter, select, orderby, top, skip, count, xUIPATHOrganizationUnitId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets Buckets.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Administration or
            /// Administration.Read.
            ///
            /// Required permissions: Buckets.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='filter'>
            /// Restricts the set of items returned. The maximum number of expressions is
            /// 100.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            /// <param name='orderby'>
            /// Specifies the order in which items are returned. The maximum number of
            /// expressions is 5.
            /// </param>
            /// <param name='top'>
            /// Limits the number of items returned from a collection. The maximum value is
            /// 1000.
            /// </param>
            /// <param name='skip'>
            /// Excludes the specified number of items of the queried collection from the
            /// result.
            /// </param>
            /// <param name='count'>
            /// Indicates whether the total count of items within a collection are returned
            /// in the result.
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataValueOfIEnumerableOfBucketDto> GetAsync(this IBuckets operations, string expand = default(string), string filter = default(string), string select = default(string), string orderby = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), long? xUIPATHOrganizationUnitId = default(long?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(expand, filter, select, orderby, top, skip, count, xUIPATHOrganizationUnitId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a single Bucket.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Administration or
            /// Administration.Read.
            ///
            /// Required permissions: Buckets.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            public static BucketDto GetById(this IBuckets operations, long key, string expand = default(string), string select = default(string), long? xUIPATHOrganizationUnitId = default(long?))
            {
                return operations.GetByIdAsync(key, expand, select, xUIPATHOrganizationUnitId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a single Bucket.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Administration or
            /// Administration.Read.
            ///
            /// Required permissions: Buckets.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BucketDto> GetByIdAsync(this IBuckets operations, long key, string expand = default(string), string select = default(string), long? xUIPATHOrganizationUnitId = default(long?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByIdWithHttpMessagesAsync(key, expand, select, xUIPATHOrganizationUnitId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a bucket
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Administration or
            /// Administration.Write.
            ///
            /// Required permissions: Buckets.Delete.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            public static void DeleteById(this IBuckets operations, long key, long? xUIPATHOrganizationUnitId = default(long?))
            {
                operations.DeleteByIdAsync(key, xUIPATHOrganizationUnitId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a bucket
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Administration or
            /// Administration.Write.
            ///
            /// Required permissions: Buckets.Delete.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteByIdAsync(this IBuckets operations, long key, long? xUIPATHOrganizationUnitId = default(long?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteByIdWithHttpMessagesAsync(key, xUIPATHOrganizationUnitId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates a bucket.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Administration or
            /// Administration.Write.
            ///
            /// Required permissions: Buckets.Edit.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            public static BucketDto PutById(this IBuckets operations, long key, BucketDto body = default(BucketDto), long? xUIPATHOrganizationUnitId = default(long?))
            {
                return operations.PutByIdAsync(key, body, xUIPATHOrganizationUnitId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a bucket.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Administration or
            /// Administration.Write.
            ///
            /// Required permissions: Buckets.Edit.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BucketDto> PutByIdAsync(this IBuckets operations, long key, BucketDto body = default(BucketDto), long? xUIPATHOrganizationUnitId = default(long?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutByIdWithHttpMessagesAsync(key, body, xUIPATHOrganizationUnitId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a file.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Administration or
            /// Administration.Write.
            ///
            /// Required permissions: Buckets.View and BlobFiles.Delete.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// The Bucket Id
            /// </param>
            /// <param name='path'>
            /// The BlobFile full path
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            public static void DeleteFileByKey(this IBuckets operations, long key, string path = default(string), long? xUIPATHOrganizationUnitId = default(long?))
            {
                operations.DeleteFileByKeyAsync(key, path, xUIPATHOrganizationUnitId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a file.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Administration or
            /// Administration.Write.
            ///
            /// Required permissions: Buckets.View and BlobFiles.Delete.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// The Bucket Id
            /// </param>
            /// <param name='path'>
            /// The BlobFile full path
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteFileByKeyAsync(this IBuckets operations, long key, string path = default(string), long? xUIPATHOrganizationUnitId = default(long?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteFileByKeyWithHttpMessagesAsync(key, path, xUIPATHOrganizationUnitId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the child directories in a directory.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Administration or
            /// Administration.Read.
            ///
            /// Required permissions: Buckets.View and BlobFiles.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// The Bucket Id
            /// </param>
            /// <param name='directory'>
            /// The directory path
            /// </param>
            /// <param name='fileNameGlob'>
            /// Directory listing filter
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='filter'>
            /// Restricts the set of items returned. The maximum number of expressions is
            /// 100.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            /// <param name='orderby'>
            /// Specifies the order in which items are returned. The maximum number of
            /// expressions is 5.
            /// </param>
            /// <param name='top'>
            /// Number of directories to return
            /// </param>
            /// <param name='skip'>
            /// Number of directories to skip
            /// </param>
            /// <param name='count'>
            /// Indicates whether the total count of items within a collection are returned
            /// in the result.
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            public static ODataValueOfIEnumerableOfBlobFileDto GetDirectoriesByKey(this IBuckets operations, long key, string directory = default(string), string fileNameGlob = default(string), string expand = default(string), string filter = default(string), string select = default(string), string orderby = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), long? xUIPATHOrganizationUnitId = default(long?))
            {
                return operations.GetDirectoriesByKeyAsync(key, directory, fileNameGlob, expand, filter, select, orderby, top, skip, count, xUIPATHOrganizationUnitId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the child directories in a directory.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Administration or
            /// Administration.Read.
            ///
            /// Required permissions: Buckets.View and BlobFiles.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// The Bucket Id
            /// </param>
            /// <param name='directory'>
            /// The directory path
            /// </param>
            /// <param name='fileNameGlob'>
            /// Directory listing filter
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='filter'>
            /// Restricts the set of items returned. The maximum number of expressions is
            /// 100.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            /// <param name='orderby'>
            /// Specifies the order in which items are returned. The maximum number of
            /// expressions is 5.
            /// </param>
            /// <param name='top'>
            /// Number of directories to return
            /// </param>
            /// <param name='skip'>
            /// Number of directories to skip
            /// </param>
            /// <param name='count'>
            /// Indicates whether the total count of items within a collection are returned
            /// in the result.
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataValueOfIEnumerableOfBlobFileDto> GetDirectoriesByKeyAsync(this IBuckets operations, long key, string directory = default(string), string fileNameGlob = default(string), string expand = default(string), string filter = default(string), string select = default(string), string orderby = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), long? xUIPATHOrganizationUnitId = default(long?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDirectoriesByKeyWithHttpMessagesAsync(key, directory, fileNameGlob, expand, filter, select, orderby, top, skip, count, xUIPATHOrganizationUnitId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a file metadata.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Administration or
            /// Administration.Read.
            ///
            /// Required permissions: Buckets.View and BlobFiles.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// The Bucket Id
            /// </param>
            /// <param name='path'>
            /// The BlobFile full path
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            public static BlobFileDto GetFileByKey(this IBuckets operations, long key, string path = default(string), string expand = default(string), string select = default(string), long? xUIPATHOrganizationUnitId = default(long?))
            {
                return operations.GetFileByKeyAsync(key, path, expand, select, xUIPATHOrganizationUnitId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a file metadata.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Administration or
            /// Administration.Read.
            ///
            /// Required permissions: Buckets.View and BlobFiles.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// The Bucket Id
            /// </param>
            /// <param name='path'>
            /// The BlobFile full path
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BlobFileDto> GetFileByKeyAsync(this IBuckets operations, long key, string path = default(string), string expand = default(string), string select = default(string), long? xUIPATHOrganizationUnitId = default(long?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFileByKeyWithHttpMessagesAsync(key, path, expand, select, xUIPATHOrganizationUnitId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the files in a directory.
            /// Optionally returns all files in all child directories (recursive).
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Administration or
            /// Administration.Read.
            ///
            /// Required permissions: Buckets.View and BlobFiles.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// The Bucket Id
            /// </param>
            /// <param name='directory'>
            /// The directory path
            /// </param>
            /// <param name='recursive'>
            /// Recurse subdirectories (flat view)
            /// </param>
            /// <param name='fileNameGlob'>
            /// Files listing filter
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='filter'>
            /// Restricts the set of items returned. The maximum number of expressions is
            /// 100.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            /// <param name='orderby'>
            /// Specifies the order in which items are returned. The maximum number of
            /// expressions is 5.
            /// </param>
            /// <param name='top'>
            /// Number of files to return
            /// </param>
            /// <param name='skip'>
            /// Number of files to skip
            /// </param>
            /// <param name='count'>
            /// Indicates whether the total count of items within a collection are returned
            /// in the result.
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            public static ODataValueOfIEnumerableOfBlobFileDto GetFilesByKey(this IBuckets operations, long key, string directory = default(string), bool? recursive = false, string fileNameGlob = default(string), string expand = default(string), string filter = default(string), string select = default(string), string orderby = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), long? xUIPATHOrganizationUnitId = default(long?))
            {
                return operations.GetFilesByKeyAsync(key, directory, recursive, fileNameGlob, expand, filter, select, orderby, top, skip, count, xUIPATHOrganizationUnitId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the files in a directory.
            /// Optionally returns all files in all child directories (recursive).
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Administration or
            /// Administration.Read.
            ///
            /// Required permissions: Buckets.View and BlobFiles.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// The Bucket Id
            /// </param>
            /// <param name='directory'>
            /// The directory path
            /// </param>
            /// <param name='recursive'>
            /// Recurse subdirectories (flat view)
            /// </param>
            /// <param name='fileNameGlob'>
            /// Files listing filter
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='filter'>
            /// Restricts the set of items returned. The maximum number of expressions is
            /// 100.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            /// <param name='orderby'>
            /// Specifies the order in which items are returned. The maximum number of
            /// expressions is 5.
            /// </param>
            /// <param name='top'>
            /// Number of files to return
            /// </param>
            /// <param name='skip'>
            /// Number of files to skip
            /// </param>
            /// <param name='count'>
            /// Indicates whether the total count of items within a collection are returned
            /// in the result.
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataValueOfIEnumerableOfBlobFileDto> GetFilesByKeyAsync(this IBuckets operations, long key, string directory = default(string), bool? recursive = false, string fileNameGlob = default(string), string expand = default(string), string filter = default(string), string select = default(string), string orderby = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), long? xUIPATHOrganizationUnitId = default(long?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFilesByKeyWithHttpMessagesAsync(key, directory, recursive, fileNameGlob, expand, filter, select, orderby, top, skip, count, xUIPATHOrganizationUnitId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a direct download URL for BlobFile.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Administration or
            /// Administration.Read.
            ///
            /// Required permissions: Buckets.View and BlobFiles.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// The Bucket Id
            /// </param>
            /// <param name='path'>
            /// The BlobFile full path
            /// </param>
            /// <param name='expiryInMinutes'>
            /// URL expiration time
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            public static BlobFileAccessDto GetReadUriByKey(this IBuckets operations, long key, string path = default(string), int? expiryInMinutes = 0, string expand = default(string), string select = default(string), long? xUIPATHOrganizationUnitId = default(long?))
            {
                return operations.GetReadUriByKeyAsync(key, path, expiryInMinutes, expand, select, xUIPATHOrganizationUnitId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a direct download URL for BlobFile.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Administration or
            /// Administration.Read.
            ///
            /// Required permissions: Buckets.View and BlobFiles.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// The Bucket Id
            /// </param>
            /// <param name='path'>
            /// The BlobFile full path
            /// </param>
            /// <param name='expiryInMinutes'>
            /// URL expiration time
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BlobFileAccessDto> GetReadUriByKeyAsync(this IBuckets operations, long key, string path = default(string), int? expiryInMinutes = 0, string expand = default(string), string select = default(string), long? xUIPATHOrganizationUnitId = default(long?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReadUriByKeyWithHttpMessagesAsync(key, path, expiryInMinutes, expand, select, xUIPATHOrganizationUnitId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a direct upload URL for BlobFile.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Administration or
            /// Administration.Read.
            ///
            /// Required permissions: Buckets.View and BlobFiles.Create.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// The Bucket Id
            /// </param>
            /// <param name='path'>
            /// The BlobFile full path
            /// </param>
            /// <param name='expiryInMinutes'>
            /// URL Expiration time
            /// </param>
            /// <param name='contentType'>
            /// ContentType for S3 access policy
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            public static BlobFileAccessDto GetWriteUriByKey(this IBuckets operations, long key, string path = default(string), int? expiryInMinutes = 0, string contentType = default(string), string expand = default(string), string select = default(string), long? xUIPATHOrganizationUnitId = default(long?))
            {
                return operations.GetWriteUriByKeyAsync(key, path, expiryInMinutes, contentType, expand, select, xUIPATHOrganizationUnitId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a direct upload URL for BlobFile.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Administration or
            /// Administration.Read.
            ///
            /// Required permissions: Buckets.View and BlobFiles.Create.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// The Bucket Id
            /// </param>
            /// <param name='path'>
            /// The BlobFile full path
            /// </param>
            /// <param name='expiryInMinutes'>
            /// URL Expiration time
            /// </param>
            /// <param name='contentType'>
            /// ContentType for S3 access policy
            /// </param>
            /// <param name='expand'>
            /// Indicates the related entities to be represented inline. The maximum depth
            /// is 2.
            /// </param>
            /// <param name='select'>
            /// Limits the properties returned in the result.
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BlobFileAccessDto> GetWriteUriByKeyAsync(this IBuckets operations, long key, string path = default(string), int? expiryInMinutes = 0, string contentType = default(string), string expand = default(string), string select = default(string), long? xUIPATHOrganizationUnitId = default(long?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWriteUriByKeyWithHttpMessagesAsync(key, path, expiryInMinutes, contentType, expand, select, xUIPATHOrganizationUnitId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
